%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: <7ED8><56FE>2.pdf
%%Creator: Adobe Acrobat 11.0.12
%%For: Gerald
%%CreationDate: 2016/5/27, 19:58:39
%%BoundingBox: 68 155 478 741
%%HiResBoundingBox: 0 0 594.7500 841.5000
%%CropBox: 0 0 594.7500 841.5000
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 952 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2016-05-27T19:33:14+08:00"
   xmp:CreatorTool="Microsoft® Visio® 2013"
   xmp:ModifyDate="2016-05-27T19:33:14+08:00"
   pdf:Keywords=""
   pdf:Producer="Microsoft® Visio® 2013">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Gerald Zhang</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 8 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -841.5 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 841.5 li
594.75 841.5 li
594.75 0 li
cp
clp
345.75 222.75 mo
165.75 222.75 li
165.75 99.75 li
345.75 99.75 li
345.75 222.75 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 841.5 ]ct
[181.5 0 0 124.5 165 618 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 242 
/H 166 
/M[242 0 0 -166 0 166 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 242 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 242 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 242 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 242 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&_Z5bu
o)SglK)hDArW2`nrrMfnJcLB&JcLB&JcO$qq#U<n!!N'!rri0"q>oIRJcOI(rrN&urrN-$rW!!#!<`)u
!WrN*r;Zm#!Wi6"rrLRKJcO[.rrN-"rW*'#!!2ip!W`<%r;cs"!!0n9JcP*:rrV?`!!9P.K`M)QrrN*#
!!N9'!sAf3#6"l-#6+u(#m:S@#mLV5#6kA9"9el0"TAK#!O_uj!!!'!!!E<(!W`E&!WiB*!WWB$!s&N/
pBCR$r<!E2!sAW.!WiH)!!33#!!!&"!1<fe!WE'!!WE'*!WW6$!!**#!!2utpAb?t!!*-$!r`0&!<<-#
!La"b!!!)X!;6Bm!fd8l!;up1!WiK,"9o&8"pbMB$OmOT%M/LL!YH%Xq%EcA&cE7L%hB-Z$k!IN$4$k@
"Tef/"9&B#!K7#r!"o;6!<WB("9\l1"pG/7"pbD<$2t25#mgkC$2b,4#mgqFr<O5F#R1J<"U>27"9Sc0
!<N<'!WiB&!!*'"JcO*s"T\T'!<<2q!!30$!<*#t!!!&t!<*!)!!*'#!<<*#!W2ot!WE'!!rN#u!Up)@
!8@JR!lk9@!os@!!3Q>$!>PY;"9Sc1#6kMB$OmRV&/#Wj()@]'r>>_V)B0V8qAfVV*#fh9)B'J2)AsA-
()7Mr&J,E^%1<IJ#6k;5!s/Q'!MKM)!"&`,!<N6'!W`E-"9&H3#R1S@#RLeG$OdFOrXAu?$k!LRq@3Z<
%LidS%fHh>$k!FM$P3XO#R:P<"U,#2!s&H)!<N:c!5njB!<<-$!!3-$qu?m$!!*'#!W;uu!Vucr!VcWq
!<W&s%KQP0!<<-#!<<-#!<<0&r;ZfuLB,[$!!9e5!!;usJcOd1rW*f:"9Sc2"pt\F%1Wp^'G_N')&aG7
*?QC%+T3Gb+<Vp*+p&u3+T3J_+<)CE*Zc=A)]9M1()7Jp%h9$V#m^b>!sAZ,!<MfmJcP3=#QXo+!WrK)
"9\W,$3g_@$4.(K%1N^Tr=/f=rX\r>!=fY8&cWC?&cN:@&H31T%LrjU$OdCM$4."C"pG/5"U"l/!!;9_
JcPQG"9AK'!!<&u"T\T(!!*-!!!E<&!!*,V!!!&s!!E<&!<<0"!<3)Q!/1CS!WW4P!1*]b!>,A9!sSu9
$477S&el)t)&aJ8!$;+^"sG*6+X86XqBPSWqBI%,,9n?S+X%sM+!)FA)&O,('+k`a$OI"@!s8T+!<L7A
UAuD;!!*-'!X&Z0"U##8$4.(K$OdLT%hK6^&J#Hb&J,Kcq[rE4q@OMT&J5Qb%hT<`%M'$W%1EUO$4-tD
"U,#-!W`9&\cAi4"T\T(!!!'!!!WH(!<E0#!VHHm!V?B_!!!&q!!!&n!!WH(!!*'"!Nc@4!!!)D!.k3n
!#kq>!X&T0#7(YG%M9Bj(`FA7*ZuRK+<_sT,:!.4i$J=I![Ap8(aL=N+<VaJ*ZZ1<(_mYp%1<IH"Tnl/
!<JYiec6Wi!!36("9eu4"pYG@$OdFR%M'*]&J#Eb&.oNR&c`L$&c`LB&e5Kc&.fEc%M'*\%h8sV$k!CL
#R1G9!s/N+!!/)[hZ*f\!!!$"!V$-i!W2ot!T3qX!W2rt!W2ot!Vufq!<W<%!<E*"JcLi3!!;fn_Z7=L
(BFO<"9Si6$4IFW'G_Q**?H:G+<_sT,Q8tJ-1</Z,Sq[N,U4NW+<MXE)&O)$&.K!Q#6Y,1!<KA(`W-&A
!s8H)&dJ[K#n%1M%M'*_%hK<a&J>]fee7im#7qL\&J,Kc&cE4L%LigR$4$h>"pG#/!!/eod/X:M!!!$#
rVup!pAb0orVup!ci=%HrW)s!p&P'm"TSN(!!*+d!.k4I!!!(X!:Kn(!<E6)"U55@%M9?i)&jS<+<VjQ
,U4Q[`$PC.'I+kJ+<VaI*#TS.&e>?V#6k83!<IcPq>^g&!WrT/":#,;$2t;=%M0-\&J5Qd&eMto"V;:Z
&J,QQ%h&pW$jm7G"U+u2!WW8n!/COW!<<-#!!3-#!WE'!!Vucu!<<*#_uKc<rVup!nGrRikQ$eH!!;Zj
VuQf!g]4)L'`e=:"9\r8$P!a_(E4>9+<VgP,:"Q.-,h/F,U=T[,9S*N*ZGt4&e>EX#6k83!<L[MY5f4:
!!36'"U5,7#mh"J%M0-\&.oN<'%%<p&/#Qd&cE4J%1N^Q#mLP8"9JQ(`rNUL#lt).!!**#!<<2O!8RVW
!<<*#r;ciuqZ$a"!!!$#])[E_eGoRNY5m)Q'*/+8!sT#=%h]To)]^"D+X83W,f1kt,nqUM,:"ET+!)C>
()%5g$3p\:!W`>"!8mhg!<E6)"pP;<$4I:P%hT?b&[W2L&ekli&J,Ka&.]6Y$OI(C"p4l.!WW7j!:0[c
!MBDp!<<*#r;Zftr;d$$!<<0%Mu`VQ!!8)Z_Z7^W&ci"7!sSr:%M9Em)]g+F+XA9XcR%?mrZi"!+<VaG
)AWts$O?q=!W`>5!7Lo[!<<0&"9Sc2#mq(M%hK6_&.ublkRnI=&eGWc%h9'Y$OI+C"p=u.!Nc@T!<3*!
!<3*!!!!&-!;$6m!<<0"!!!'!!!!&s!!!%n!.k4>!!!(c!;QU)!<E6("pteN'Gqc1+<Vj,,buac,Qo>7
+<DL/)&3_n$3gV9!We>^!W`<'$NpV;#RLnI%hK3^&>Bd>&/#NdrXT;F$OR1E"Tnc-!r`1^!!!&p!!!'!
!!!%o!!30$!W2p&!<<*#!!!'$nGo*[!!;<`JcMkP%06M5"pPDE&eu9)+!Dg,,j6P`,nVCJ,9n<Q*ZGk/
%grXI!s/K(h>k"b%fuh9!sJl7$4RIU%hK9b&DRo9&dAm[&J5Nb&,lqA#6b;7!WW3$dK%,a!!3'!!!2or
!W`9%ciDAl!!2ut!!2lq!!1"<JcLB&h>doa!WrT3$P4!g)]g.$,60!s-0-BO,Rkn?*uc(5&If'P!s/K(
YQ3nfrW3</"UGDC%1a!K&Z??3&eGTe&.fEb%1<RN"pP54!!!%q!:p0p!<<*#!!!%d!;lfu!<<0!!!<6%
!!3'!!!/AcJcN[gcN"FU!WrT3$kX6n*?QFJ,UC8Rcm92J,9n<S*ZGk-%giOD!W`>>!87GP!XT&9#n.7Q
%hB3_[M%=-%M99`&J#6W#R:M8!WW3$[fGIh!!2ip!!0)"iW&r[qZ$TsW;qMMJcH8]!WrT3$kX6n*Zu[P
,UAKur[%Oh$m?c8*#B8!$3pY7!<JhnrW3</#71bH%hB6R&J>Y8&dT$]&.fEa%L`[K#6b22!!!%k!!!'!
!!30$!W;uu!VcY]!!30$!VZQo!VueJ!.k3X!"Ar1!sJr=&Jc9++<`!Uh'K-K%4!/C+<MR>'+YET!s/Mb
!5AO5!XJu8#n%.P%hK<!'"8J\&J5Ka%L`[L"TnhX!6G3@!WE'!!W;uu!Q4uJ!!!&D!.k3&!9O7j!<E<,
#Rh:\)BL"E,UBE:g*I1R,9n<Q*#B8!$3pY7!Oi("!"8l/!sAf5#n%.P%hK;D''9f8&.oKa&.T*U#6b84
!ic8!!<3)u!!!&u!!!%_!:g*i!VcWp!Mf\q!r;nK!5eff!"8l0"U5>G'cJ,9+XA>E--%;@,U4NV*ul(0
%LE:A!<L=ChuF&e!sJr;$kEj[&?QSo&e,Ba&Io?^$j[%@"9SZ*^&[O#!!3'!!!2ut!!/bnhZ*WWq>^X!
!!!$#YlK@UhZ*WXX8iG*!WrZ7%i#6c*ZuUO,`!c>,n)%D,9S'I((go\"Te_,!"&c/"U,2>%1`s\&Gd#k
&df0^&Io?]$OHt@"fVJ%!W<!#!<<*#mJr7I!!3#u!!2ut!!.ZOJcNC_$ipA3"pbYN(`abC,UCndUa6Ep
,9n?Q)ANbi#6P#.li>'+$NU81"9o&9$k<j\&BGKg&c`LB&I/gV$4-k>!Wq6ZdJsCN!<<*#qu?]t]E#SE
!!2lq!!1IIh>dNWV>u2Jli7Co!WrW7&Jc<-+=&5--.4(I,U4HT*>fG"#R(>3]`@d,#m(/1"UPPG&.]><
'&F6.&.oHa%L`XJ"p>%4!;um"!<<*#M?)oA!!2ut"9AN'!!/kqJcN[gg].Z^"9o2D'H%r8,:'Q@^Ej75
,Tn0J((goY!s/MM!9aCh!<WH.#RLqN&J:iPaq>$m%h9$V#mCD4!Wg4>oDnmlrVup!PlTA8!s&B&!O2V*
!!7fRNrTRh!WrW9',MZ2+X86YJgKe1$7$i>*Z5Y&#mLG3\c<*=!WiH.$4ICU&.oKG&qUbk&dT']%h/gM
"U"k5!!!&t!!!&`!.k1O!!.`QJcNRd$3:24#n@[h*Zu^Rc6]#-$7$i>*ubt-$jQn9nGp]3#6Y28$4@@T
&A]!Y&df0^&.f9Y#mUV9!Ta=5!!!&u!!<9&!!0J-[/^1-q>gKqf`6U([f?C0blI86$3:87$4msn+<r-W
SL)H*$7$l>*Z5V##Qk,/_Z9W8$3:54"UGJG%hTEcOV64X#S7IV$OR.B!Wp(9rW*$"!WE'#!!!%R!9*t_
!<<*#!!!&4!!!)g!.k3g!9*tc!<N?/%20U#+=&56-+P</,U4KT)\rqj"Te_T!:Bgn!<N<*#RLkL%hP?G
`=`Ig&J5N_$j[">!QY98!!WH(!<E0#!L!N2!!!'!!!!&/!.k38!"&`."pkeT)]p7K,l/g=-0HQ\,U4EP
(_I,\"9H@>#Qt;:$4@@V&J4@CJeIVe#S@RW$jd(@!s-:>!!2lq!!2'ZJcPTHr;hoYK)blQ`;g2F!X8uD
(*+MB,fh9u,mbhB+<ML9%1*+;p&NG>#6=r2#n%4R&\A[N&d]*\%h9$V#R1>2l2ZD9Y5eY*!<</u!!!&V
!.k3V!!!)K!;6C!!<`W8&fD`5,UA^&`?bg8+Wq^=%gW7=!QY6G!sJi8%1`s\MA";L#n[^[%13=E!WiDD
!!<6%!!3'!!!3#uJcOL)!!0)"JcN[gjo>Yf!sT/J)BU.JVBrPp#p^`<*>T.l"9JVX!:g*q!<N?.$OdRY
&Xj?H&dT'[%LWRH!<N;I!<)ru!JUTm!!!)B!!!)r!.k3<!!iT-#S%Of+<`$&-%[H&,mbhB+WV=0$3gP4
bl@tL!X&]6$P3m4&qUb`&dAmX%LWOH"NpcG!<E*"fDpL'q#CBqr;Zm"!!1:D!!:4AJcNmm#Qb)6%i---
,:(/QOsLD[,Tn-E&IJ[C!W)lI!!`Q,":#>F%hZ5_Se;;?&.]9[#mCA2mJu)D!!9"tWW3,%!<<0"!!!&Y
!.k3&!;Z[$!Wr]=(*+MB,a'Ih,mY_<*Z5Ru"p+hQ!!E?)"pbS<%M'/*'$Lsn&J#B]#R(>3bQ%VDo`0RD
df9@KYlK@U_Z8s%#QY#5%i-0/,UB*1XsF>u,9@a9$O-Y5h>m6L#QXu2#7D"R&.k-?\e55[&J#<V"p=tT
!!!&s!<3(W!07*[!qcPF!1X#p!<WT<(*+MC,k*+3-/BjQ,9\-H&dnmF!S%/U!<NH3$P!XX&EFIU''U#7
&J,K_#R(;1!S%/M!W)ls!S@C(!:Tsi!<N;O!!!)=!.k3q!!`N,#S.[k+=+ZIN?noW+WhR7$3^J3!!([P
#6=l/#R_+Q&@)q9&dJsX%1!+?!WhlmjT#8]qZ$TsV?!@k!!2$YnGiOjP5p17rW!0(!sfDQ*?ZVe-+kN0
,U"3H&IJXB!S@AW!X&`9%Ls$_JeH*:#7qCT#mC>2!S7;T!<N9%!!2]lJcO'r!!9S/JcN[gmJmIm"9o>O
)^-Jt-)r6r,U+<I&.&I@i;iZR"p4r3$k3d[OV5&7"q_=R#R(51f`2*T!!*'$!!!%R!5JR;!<<-#!lt@n
!2';t!<`W:'c\>A,jZh/-.sRL,9S$E&./L?gAhH\!sf5D%hK<1&qUbX&dK!Z%h&^I!Wh$U!!2utrrLUL
JcP0<!s&B%!La"?!;6Bm!o3h^!<NH4'H8/>,eG@Z,mGS:*>T.k!rrAW!!NK.#n7CWXqI!4"q_@U$OHq;
o`41U!!3'!!!/_mJcLB&JcH#W"ptt]+<r.h-+G6+,9RsA%L*%:hZ*i^"9f,@&/"gQJeH!7"q_@U$O-\8
`W1Sjbl@hH!<</3!.k3g!:^$o!<WZ?)':"IRO+gW#:(H4'FG$G!Ta=[!!WH*"UGPK&<.=.&dJs[%LE7?
!!2$Y!s&B%!W<"M!58F;!<<*#!!32Z!!!)g!.k3G!!`N-"qMIj,:)J!JgJto#:(N;)A3A[!T="^!s8c9
%h[P/JeI&U#7qIZ$j[";!T="Y!QkCo!:Bge!W2ou!WehlJcPBB!!;0\#6=l1%29a(,I\tR,m,D9*Z+tj
#Qk+g!!`N)"9o/A%M>`SOV.g/%h&^H!r)c]!!<6%!!/SiRK*<gl2ZD9K`D/T"UYAG)B^:NLF'>S#9t?3
'b1HM!Ta:d!<iW6$kEm\q@\Am_%Hqa%h8pN"TdZa#6=f)!<<*#!U]r>!6G3@!TF(Z!o!^,!5eg/!!`N,
#S7go+XEC#UEp*i+WD+'"p3rf#64`*":,DH&;h+(&dAmZ%1<=B!os@]!VueJ!4r46!<<-#!R1Ur!2]`$
!<NH7(*+MCjX#L)dj55E,9Rm9#Qk+k!!WH(":,DG&(hMH'&O<+&.oH_#R1@m!!!&?!.k4:!!!'!!!!%j
!.k4%!!WH+$5+:#,d\kM,lf1p+W_C.#6Fqj!!WH*"UGJH&?$5%&dAmX$O-b7!W2rc!!!&t!!!%i!1*]b
!Ug$b!!!(X!/LUY!<NK9(EWZ&,_RJL,mGS;)\NJ[!U9Xi!<E9-$kO!^pC`&j^(LV^&If!L!WhKb!!3#u
!!2BcJcNjl!!3'!!!0k8JcO-t!!;fnp&G9t":Pta+=!*sTd9ph,9I^3#6Fql!!!$'!=&o?%hXU1XV(jM
&J,?U!s&Gg!!E<(!!!&q!.k3]!!!&u!!!&a!!!)b!.k3L!!`N-#S7jr,:):qJgJbi"sY61'FY*FlMq+k
":,GJ&J3P,JeHiO"q_@T#mUJ3lN$nbrVup!b5d+ojo>Mb!<<0%U&]cFmJm4gli74k"q).c+=+6=JgC[K
,U4EL&.&I?m/R:k"9f,B&#Bnu&dAmZ&.JmL"8r4O!1<fe!WE'#!<</j!.k3.!!`N-#S7js,UJ$gYU'K!
+<;.("9Ili"Tnl5%1s0D&qUb.&d8dU#mLD2m/R:j!!*'"!U'N8!6"p?!<<0%_>o/fc2[hGpAjsg"p+u9
(*+SEOsQ\G"sb9/&-r=<mf3Cj"9\c7%M=C-WY,LI&.JmJ!<M*YJcN4Z!!3'!!!1LJJcMeN"p"i4&/cT9
i$Et$c6WZ?,9.C*"9Iul"p"f/#Rq:Ue.R?Gfb+H#%LE:>!Ug$f!<N6$!QY7m!94%]!<E6&U]>uHli7"e
n,NXn":Gna+saB=JgL@A"XG3-%gN1)!!E<+#n@QB&rI;)&.f6U"9&;j!!33&!L3YN!!!&u!!!&k!.k3/
!!NE/%N$<6r[!.BXsF8t+<2"#!s.lk"9f#=&.nCFJeGU,":ktJ"Tn/n!!3#u!!23^JcLB&JcN[gq>^^#
!soSZ+=*$pSL"Ic,9@U/"Tn2o!s/W5%0-ok&ucKJ&.oE\#6Ftc!.k3Y!!!&u!!!&L!.k3O!!WH-%2L$1
,i9o"--RY>,9Rm9#Qt2"!!WH,"q(nQ&CV8D'%dg$&J#9U"9S\r!!!'!!!30$!QP1l!9!qW!V-3j!jr#[
!8IPY!<NH:)'C0,-%[H@,mGV=*#&_^!V??r!<E9.%1a&F&r7/(&Io*N!W[fPOoPI_nc47AN;s.`!t#__
,:*46JgIKE"XG0+%L*"+!!E?,#n@R:&qUb+&d8gW$jHh9nGiOiiW+Q1_uKl?!!!&;!.k3g!;ca"!<ilI
+!ZdlRjA7`+WD"!"9J/q"T\`2$P3o%&uQ?H&J5BW"9S\t!!!&h!.k3R!!!&l!!!)]!.k3P!!NE/%iQQ8
h'IY!b9[?<+WV7(!s/#o"9Sl<%h[2%JeHWI":u%L"9S2q!!0k8JcO^/rrJqrJcOU,"p"i4&fVr=XX/QF
qBZ:i*u5:i!VQKs!<WN3%1f*ELCs_%&.8[F!!2`m!s&B%!L!MD!!!&n!.k3>!!!)o!!WH+$5=L(,lAs?
-*&<q,9Rj6#6OPu"Tei6%M03@&qUb*&d8jX%0m%<o)Jjn!!!&\!.k3c!!!&=!.k3g!;lg#!<rrJ+!cgl
RO&.`+WD"!!Wi#q"p"i3$P!^\JeFmm"V1tI"9APt!!!'!!<3)l!.k3R!!!&m!!!)\!.k3Q!!NE/%iHK7
ga.Ouas@6;+rq@)!s/,r"Tei5$P*ir&qUbH&d/dV$O$V)!!30$!Q"hg!.k3&!8[\[!<NN=)^$E--%[H=
,m>M7'ak-Fp](Hu!<`]:%\FAg&d&^V$3^D1o`+smO8t:@!!;ioJcLi3"p"f5'-/;Cq^$h?W[.fo+;bOk
!VZQs!X8uA&ag9`'"/DV&.f6S"9J2r!!1sWJcNXf"T\T'!<</@!.k3m!!!)u!;um%!<W`F*[;qi-(-%_
,9Rj7"p4N!"p,#:%hT?cJeFmm"VD7S#6Y,!!!!&l!.k3R!!!)O!.k3R!!NB,$Pjd.gEhFtaX%*8+;taq
!quZt"U,8E&^M)A'%ITu&J#<V"Tl%2JcLB&JcOX-"T\`8(*=g&-%[H=,m>M:)A!)SpAb<s"q(qQT+Zkk
!tc+T#QOu#!!!*"!!!%`!0$sY!VZSG!07*`!<ruL+=-e0JgIEC"sb?2&I8F=p](F"#Rh7UmLk*a[1WWR
$OHq:!V??l!TF*2!5JR9!WW8@!.k3g!;um$!<irM+X;plR3`%_+<(q!"9J;u#6=r3$kX'a&qUal&d8dT
#R1A3q#CHs!!2QhJcMtS!s&B%!VcWp!oa33!3Q;*!<irM+=#VeJgJMb"sb<2&d\[Aq#CR!!X9&D&^M)A
'%@Ns%h/dJ"8Dlq!Pe\e!8dbY!<<*#p](9qZ2fIVh>d]\"qMRo,HE,B-2Ahk,U+6C$3L>)!!NE,#7V1U
T+Zhj!YGnM!<rW!!!!(^!.k3&!07*`!X9/Q+=$_/JgIEC"sb?3'FFpCq#CR"":#AH&ag9`'"&>T&.T!M
!n..$!.k3&!5eg8!!NE.%iHK7N$Xl<"sbB5'FFpCq#CX$":#AH&J>_.&u6-C&Io0Q!qlTo!q62A!.k3&
!3Q;*!<irM+=#VeJgJMb"sb<2&d\[Aq#CR!!X9&D&^M)A'%@Ns%h/dJ"8Dlq!Pe\e!8dbY!<<*#p](9q
Z2fIVh>d]["V)@m,HE,B-2Ahk,Tn$=#Qt2(!!NB+"q2(UT+Zhj!Y5_G!X8`-q#CHs!!//]O8o@`!!!&p
!!!(P!07*`!<ruL+=-e0JgIEC"sb?2&I8F=p](F"#Rh7UmLk*a[1WWR$OHq:!V??l!TF*2!5JR9!WW8@
!.k3g!;um$!<`iI+!cdkR3`"]+W:mr!qu[!!<roB&/#V-&u?3D&J5KY"82]p!r`0"!V6;C!3?/#!S@C(
!3Q;*!<iiH*[BDcJgJMb"X>-.%gN11!!EH/$P*iq&qUbH&d8jX%1!+=ZiG[XJcLB&h>d`\!t5nc,:'?:
JgL4="X>--%gE+0!!NE/$4d^[TFutl!tc%Q#6=r/nc/XjPQ6aE!!;fnJcLi3"p"f5'-/;Cq^$h?W[.fo
+;bOk!VZQs!X8uA&ag9`'"/DV&.f6S"9J2r!!1sWJcNXf"T\T'!<</@!.k3m!!!)u!;um%!<NN=)^$Dc
-(-%_,9@R-"9J8t#6=i.#n%4U&qUam&d/dW$3^J'!!!&h!.k3Q!!!)P!.k3Q!!NE/%iHK7ga.Ouas@6;
+rq@)!s/,r"Tei5$P*ir&qUbH&d/dV$O$V)!!30$!Q"hg!.k3&!8RVY!<rrJ+!dp6JgL7>"sb?2&I8F=
pAb?t":#;E&>0Yj&d&XP#mC8/pAb0orW)s!PQ6aE!!2`m!!7cQNW97a!t#__+XHt3JgIHD"X>--%L3(.
!!NE-#n@LXn.L<c[h8iV%h/aI!qQBo!<<*#j8ac3^An67`;kJi_Z9T7"p"i4&fVr=N[:,?"X>*)%0ck,
!!WH+"pbYK&qUan&d8jY$O-_7o`,'p!!!&k!.k3Q!!!&O!.k3]!!!)n!!NE/%iQQ8h'IY!b9[?<+WV7(
!s/#o"9Sl<%h[2%JeHWI":u%L"9S2q!!0k8JcO^/rrJqrJcOR+"T\c8(*=d'-%[H?,mGS;)\E>Y!VHEr
!<`W8&.tTKL_9k'&ISmJ!rrAp!!!%]!07*[!VHEn!!7fRN;s.`!t#__,:*46JgIKE"XG0+%L*"+!!E?,
#n@R:&qUb+&d8gW$jHh9nGiOiiW+Q1_uKl?!!!&;!.k3g!;ca#!<NH:)'C/b-(H7c,U+3B$3L>$!!NB(
!sf>H!"jhrV\0+E%LE:?i;eH0YlFb)df=t"WrN>)"Uu4h,:).mJgJVe"sY6/&-rC>o)Jsq"9o5D&J3D(
JeH]K"q_@S#Qt51o)JakrW!!#!!1+?JcOa0rW2Qi!!9P.JcOO*"p"f4&fVr=Y9ecHr?VXn,9@U/"Tn2o
"9J`6%1f0GM@p.*&J#6S!Wi@R!1!Tb!W;uu!V6;C!/gg\!XB2P+=-q4JgIQG"sb<2&d\X@n,NRp#7M.T
ne-Ne\Io#U%L<4>n,NFhr;ZfujoBu5JcLB&_Z9K4"p"i7'HJACOX6PE"XG3-%gN1)!!30)#ltMJKG(6s
":u+Q#QsJp!WiB'o`0RD[/^1-r;Zfue,Y(#WW35(":,PV+=,kkJgJ\g"sbE5'FP$En,NXn!sAl=%hR5'
JeH`L"VD4N"T\Ym!<*!#!!!&@!.k42!!<6&!Wf(sJcP-;!!;Th"p+u9(*+SEYpFuJrZqao*uY[r!Wh`i
"Tef0$k<lF&rRA.&.f9V"9AN'!.k3;!!!'!!!!&i!.k3.!!`N-#S7js,UJ$gYU'K!+<;.("9Ili"Tnl5
%1s0D&qUb.&d8dU#mLD2m/R:j!!*'"!U'N8!6"p?!<<0%_>o/fc2[hGpAjpf"p+u:'c\>AP9lkJ#:(N:
)%[)W!UTjf!X&T/$4[T$'!)]M&.oH_#R1Cf!.k3\!!!'!!!30$!R^t"!2ol&!<`Z>)'C.Lj!B:'cm8l@
+<2(("9Ifg"p4u6%1j*_f+NZJg_'f'%h/gM!<MKdrW2uu!!17CJcOp5"9AN'!Wf"qJcP3=!!;Hd"p"i8
'HA5?ZR(2L#:(N9(CgZO!UB^i!<EE3%1a&K&rmS0&.oH^#6Ou-r;c9d"9AQ(!!/JfRK*<gr;Zfumf<4b
!!7uWL]@SZ!XB2O*s!T3KI*oM"sY91&de^Al2V%i!<WQ8&.oKJ&qUb1&dAp[%1!+=!U'L`!W;uu!UB`;
!6>-?!WE'!!Pe\e!71]G!qcQd!!WH+$5+:#,aB[M,mP\=*Yo1i!WhNc"p"c/#R_.SM%Zp'"qV:Q"pFu-
kl:\aqu?]tquD<K[K-:-kPtSal2ZD9V>pi%!X9)L*?ZWh-%[Gl,mP\?+;tds!s.Tc"p"],#Rh1RfFicK
h\$,)&J,BW"p3oe!!1+?JcP*:!!3'!!!/VjJcO=$#6=o4&/ZK4,do"P,lo87"</$_"p3ld"Tef4$kNuL
&s*_1&.o?Z"U"o'!9sOa!La"Y!!!'!!!!&d!.k3)!!30($3Ut\+=&4f-+,$(,Tn*C%L3%9jT#Md!<if<
%hK<K&qUb3&d8dU$O-\6j8]Dc!WW6&!!*,g!.k3n!<3)Z!!!)T!.k3g!:p0q!<NH7'ceDAQmJRT#:(H7
(_?rT!Tj@g!!!$""9o2C%M=X4YS%*N&.AgK!oa1[!Vl_I!4`(0!QtIp!2BN!!<`T:(*4YFkTtg,eg1PH
,Tn!<$3UCg!!NH,#7D%SgCf)NiXuJ-&.]0V"T\Y_!!!&B!.k4=!!`N*!!!$"!WehlJcPBB!!;*Z#6=o5
&K)Z8,e54V,m5J:*#&h`"p+ha!!WH*"UPPI&ZcV/&dJs[%1*4A!!2ipl2UebrVup!ScGA_"p"])!<<*#
lN$VY!!8/\JcH#W"q2.a+X87i-+G6+,9S!B%gE.;hZ*i^":#5@&J=pRJeH!7"q_@U$O6b9gAh6T!q$&?
!6bEE!WW84!.k3g!:Tso!<NH7'H8/>,b-0Z,mPY;*Yo7l!s.E^qZ$j%"9o/A%hTA7'!r8V&J#B[#6k51
g&M0T!!!$"!JCHe!!!&u!!!&C!.k3i!!!)V!!iT.#7VCf+XA?"-%[Gr,mPY>*Z#@o"Td?X#6P&4$4[XZ
&E"1Q''0`2&J5N^#R(A4gAq3RrW)s!e,Y(#l2UebRK.p>p&G'ogAhHZ!sT5N*?c]@-&X&T,U+<I&./OA
!87DW!WrW8%M98V&sa.7&Io3T"p"et!9=+[!WE'!!Mf^h!!E<&!<E8b!.k3&!<)s'!<WT<(*"GBN?u4`
#UCQ7)%d2[!WgsS#QXu0#7D"O&/'R-`tAUg%gr[I"9JVW!!`N)!<<-#!!2]lJcO0u!!1RL!!;*ZJcN[g
li77k!sfDQ*?ZW"-*/Bu,U"6I&dedD!T3tQ!!`N+":,AF%hOp;[h8oW%Li[I"98JS!!30$!;ult!J^Zl
!!!&u!!!&N!!!)l!.k3@!!iT-#S.[k+=&6%-%[H!,mY_=*uP\!"p+hU!!iT,"pYMG%M034&qUb\&dApZ
&.JmK"4I5M!W)ls!S@C(!:Tsi!<N;O!!!)=!.k3o!!iT-#S.[j+XA>L-''>X,9n6J&dnmF!W<#M!!iT,
"pYMG%hK;[&t9L=&J5N_#R1D4n,VJK!!2rsrrK)!JcP6>!!8DcJcPWI#Qb)6%i-0/,:&Eu^a072+<;=4
$O-Y5d/X:N!X8o<!Y,eSKbDTB#8%IU%1!+?!P\Vd!7LoJ!O2WV!5eg#!!iW.#S%Ui+<r/--*S[$,9S$E
&IJ[C!Sd\I!!`Q,"pYPH%hY-@]FkG]%hB'T"Te_N!.k3f!!!&:!.k3<!!iT-#S%Rg+!W''-%[H&,mbhB
+<;4/$3gP4bl@tL!X&]7%1j-7&qUba&dJsZ%LrjQ"pE*L"T\T(!<</R!.k4I!<3)s!!!&D!!!)A!.k3k
!!iT-"q;7c+!DlJ-'T\^,U4HQ((^cT!Wi)sdf9XS!Wr]7$P*d\\ItMI#S@XY$O?n:!WhZghZ*WWrVus"
!ic6u!!30$!oF"D!!!(g!.k4E!!rZ/#7V=b*Zu^RQR0Ts#p^Z9)\rnh!s/ME!!iZ/"pk_L%hK;1'$q6s
&.f9Z#6k52!QY6C!<<*#rW)s!rW%NMJcLB&_Z8`t#lt/6$P=0q+X883-+5*+,U=KR)A<Sd!s7'Smf3Rp
"U,2@%M9;C'#G7f&.f?_%LE=B!WpOFqZ-TrMZD$&rrN&urrKe5JcM#8#lt)2$4mpk+<`!*-%[H+,mbhA
+WVC4$O6b7_Z0rC"9o,=%1j'_m1P!`ne)3?&Io3T"Tnf,^]4E:!!1pVJcPKE!!/)[K)blQ_Z1#E!X/i>
'H%u8,UCPZRO&:d,9\0K((^fW"9J,pc2\+O"U##;%1Wm[^(R:U#nR[[&.K!Q"Tnki!7q2S!<<*#!!0A*
Z2ak*r;Zs$!<<0%gAlg*JcP?A$3:/0#7D+\*?ZRPS0c?)$7$l>*uPb&#Qt20_Z9Z9#lt&."U58A%M'/4
'%R[#&.]6[#mLS7]`8$5q>c*IiW'5b!!*'#!<<0%^&S-7mJqh=_Z8Qo$3:23#nIai+!;gSY9gh-$R?r?
+WVC3$O6b7!Rh&6!!iT."UGGC&.]>H'$([n&.oHc%L`XJ!s/K(`rPN-!!/Ace,TILp](9p\c@<^ec5[O
])W6?!Wr]:&f;W3+X86YJgKe1$7$i>*uYk)#mCA2\Gus<!X&`6$k<dZ&J4RIJeIhk#S@RW$jm7D"9Gq2
!!2or!!29`K)blPJcLB&]`8B?"9o2D'cJ)9,:(Y_THssk,U4BN((goY!s/Ml!6G3I!<WH.#7:kK%hZ_m
WtG^M&J#?Z#mCD4!oa41!<3)(!4Mq.!R1W'!!!(q!.k4;!"/f/"UGGI(*"D=,UB-2dNo8H,9\0M)&*Pe
"U"k>!;6Bu"U"r7$P![X&=*sc&do6_&.]6[$O-b;!s,_.!<E0#!W)is!K$mB!!!&s!!E<&!!*+s!.k4:
!!!)S!87D]!<E<,#n@Xd*?ZLM,do#:,n)%D,9\-I'bC]W!s/MJ!9O7h!<E9("U5>C%M'*_W=mMi$P3m^
%h9!T#R(;3!l+g+!<*!"!!/DdgAh3SrW!$$!!!&(!;ult!f$c4!!WH*!s]/E'a5Ks+<`!ULaD^?$m[&B
+<MO<&e,*L!WfD'$3C84"UGGD%hB3_q@\Am$P3m^%M0'W#R1D4!N5tu!W2ot!U]rJ!!!&u!!!'!!!30&
!.k3&!4Mq:!<NB0%1s?o*ZuUO,hXKB,n2+E,9S'J(D@8b"p=r-klAO"#lt/5#n%.P%hK;r'!r8\&.oKa
&.T*T"pG)2!<M!Vc2\"K!W`9$!W;uu!Pe]N!!!&s!!NB(!!30%ciAXt^]4?9_uSp"%06J4"UGMK()e5:
+XA>6-/'XS,U4NV*ul(1%giOD!Wfb1nc0(!!<WH/#71bH%hB3_SeC/u$kO!_%M0*Y$3p_<!WoA%r;ciu
r;Zfur;ZfuOoY%Q!!2ip!!/kq!!;usJcN[gdf9gX!WrW4$kX6n*ZuUO,ebSJ,n2+E,9S'J(D@;d#6P#.
`W4iq$N^A3"pYGB$kEj[&?ul!&df3_%M0*Y$3p_:!k86o!!!*"!!!&u!!!%r!7q2N!Nc?R!.k1\!<N?,
#Rh:\)BL"G,:"Os-2f,",U=NV*ZPt0%giOD!W`=p!<*$)"pYGB$kEj\!YH%VN"Q=+&.oE_$jm1D"Tnf+
!!/Yk!!3'!!W`9%r;Zfup]-QZ!!2fo!!2orJcLB&YQ,.6!WrT3$kX6n*?QCK,:)7pYpBo+,U4NV*ZGk-
%giOD!W`>]!4r71!XT&9#n.7Q%h90`eIoP.%hK?c&J#B[$O?t@!s/H&!S.7i!!!&7!6G3@!VHEm!QY7m
!.k4-!"8l0!sJr<&/5p"+!;d,,derY,nD7H+X%pJ)&<ho$3pY7!<KD)klC\a$O-b?#n.7Q%hT?c&?-<1
&e5Ha%hB-Z$j[%A"TeZ(!Mf_e!"8l.!!*'"!<E0#!<<.k!;ZZq!Vucr!WE'!!L<_;!5ef[!"Ar1"9o&;
%hf]s*$6:JrZoT3eKk2@rZ_go*ZGn0&./[I!s/K(^Augb%fuh9!sJo:$P!XW%M96b&A8_7')iIO%hB*X
#m^Y<"9JQ'!ODdb!!!'!!!*-%qZ$Zu!!0>)k5YJ_q>^KrV#Z)IJcPTH%KQS3!s],@&/5s#*[)XNrZn9c
s!7Rg![/X+#oOHj%LNCE!s/La!!30%!Y#;:#7(VE%1a$]&J,QdU_3\>')`CL&.T-V#R1G7"9JZ(!0I6f
!<<*#!!!$#!!3#u!!**#!Mf\q!VZQo!UTlX!!!)`!.k3L!"T)2!WrT3$kF!e)&jV=+<g_0mNoOmrZi"!
+<VaH)AX"u$46t>!W`>T!42_;!<<0&"9\r7$4I@Q%hK6_&E"2C&ePZf&.oE`&.T*V$O?k="9JT)bQ,6T
!s&B%!Vucr!Rq,"!!30$!Vl]q!W2ot!Pe\e!71]G!jhsX!##A7"9f#;$P*md(`OM=+X&*U,UC5QnKn,Z
&0i;?*ZGt4'G(]\"pP/2!<K(uhuEcZ"8rB3#RUtK%1a!\&.fEd&@N5M&d/aY&eGZS%h&mV$O[7H"Tnl/
!WW7j!:'Ud!<<0"!!<6%!!3#u!s&B%!O;\-!<<*#r;_ELJcN[g_>k;O!<N?+#7:hK&eu6&*?QCH+XA9X
,hF@'-2f)$,9n?S*ZQ(6'+bQZ"pG)1!<KS.c2\R[!!33&!sJi5#RUtJ%Ls![&.fEd&Bb^U&d&[X&eP$S
%1j$[%1<LK#6b24!W`>#!7h,M!r)`q!WE'$!<<*#^B"03!s&B%!VcWp!W)is!Ls.A!;$6k!g!EN!#,G7
!WrQ1#R_.T'G_Q**ZlLI+X862,f:oD,U=T[,9n?S*uu7:((q,e$3gY9!WiB&!J:CK!"8l.!W`H/"pYG@
$OmRD%g<LV&J>]f_%Hb\&H37C&.T3L$jm7F"pP/4!W`?&!VQMK!!E<'!!30(!!!'#!WE'!!Vl]q!Pe[8
!W;uu!Vucr!TO0D!!!)j!.k3A!#GY:!X&W2#RV"O',;9#)]^"C+X83W,U<:6cR&Q9'I+kJ+WqpN*uu7:
'b_,g$OI%B!s8H&cN'mD)$'d@!<iZ2#R:\D$OmOT%M''^&J,Kc&eYcK'%dg5&J,Nc%hT?_%L`aQ$4$h?
"Tnl/!!*'#_Z7%D"9AK'!Wi6"!!3'!!W`9%r;ciurVup!klB`D!!2ut!!2utrrN#trrKM-^]4?9_uSNl
!!9,"aoE@]!<NB+"U>;A%1a'c()\&3*ZlIH+<r*V,U4Q4,i9pH,l])),U4HT+WqmK*#fb4()%5h$OI"A
"Tni*!Ls/>!"&c0!X&T0#7(P?$2t;?%M'$\%h90`&.fEcrXo2Bh\#o#rXoYP&J,Nc%hT<`%h9$X$k3UP
#R1G9!sAc/!!*'#O9"/<!!2lq"p"])!WW3$quH`tqu?]thZ*WWqu?]tq#CBqr;ciuqZ-WsJcLi3!!;fn
_Z7+FrW*r>"9Sf4#RUtM&JGlp(`=85*ZlIH+WqmN,9nK2,P!,Z,lAkk,U=TX,9S0/+;>k:)]BS2'bh8l
%LWRI"p>#0!W`>$!5\^W!<<-#!s/T-"pG5:#mgqH$k3RS%h9-]&Io<_&J5TO&apA1&H`RU&J,ck%hT<_
&.]6[$k3UP#m^e@"U+u2!<N9'RfLY4rW2fp!!2or!!2lq!!2-\rrMio!!3'!rW)s!r;Zg!Mu_K1!!95%
JcOd1rW*o="9Si5#RLkJ%M'-b'c%W()B0Y:*ZlLJ+<^V+!?`W\+p&u3+T<P_+;Z+A*??(;)&O2*'G:rf
%1<LK#6k;5!Wr?%o`0RDli7t*!!<9*"U"u4"pPA?$47.L$P!OS%M'*^&J#EO&cWC6&HNCPrXo,?!"f)=
((CZ]$k*IL#RCY@"pG25!s&H(!WW3$kl?;8p]19o#64`)!<<-#!W)is!SdYX!<E0#!V??n!<N>S!/1CS
!WW4P!07-Z!=8f/!s8Z1#7(VD&e,<]&.oNh'c%W')&aA2)B0V8p)O8T*#fe7rYZ.^(D[c#'+tie%L`^P
#lY#2"Tnl/!r`5:!1Ns*!<<-%!<N<'!s8Z0"U5/:#RLbC$4@7N%0d7N%L`^S%JC8S%1WaS%LijT$k*LP
#mgkC#mLV="U5&3"9ei/!!3-#!OVp(!!!&u!!r].!!*'#!!*'#o)JakquH?h!!3#u"T\W(!<</q!<3(r
!3lM(!n..$!4r70!WE-1!s8Z0#6kG?$4@4M%M'*L&-<FV'(ut?&eblV&.9!Y%LijT$4-tB#6k>9"Tnl/
!rW.Y!65'K!<<*#!WiB(!W`?+!sJQ+!XAo7rWiW5#m^eCp^.*0#RUn;#T!dP"pbD;"U,)4"Tnl2!WrE(
!<<*#!!%TNci=%Hqu@3.!<E0$!!!$"!!*'"!<N-!!!2ip#lt#,!!*'#!!!&q!!!*"!!<6&!!2QhJcOR+
!!:.?!!;3]_Z6J4quQcu$j6Y7"9o#6#6tG;#RL&/#m^eC"pYA;"U5,/!rrK'!rW.d!3cG'!WE'(!<N6%
!s/N)rWE3)rW<0(#4r'#"p>/0!sJf/"9AQ*#Qb)/!WiB&!!.uX\,Za7!!*'#!!!*"!!!'!!!!&g!!NB'
!!*'$rVup!rVup!qZ)3J_uKc=df9@Lmf7q>blIS@qZ6a#oE5*rquZZphuJ?/f`2!Qr;[*(!<N<&!!**&
oE#:#!s&B%!WiB'r;ciue,Y(#huF#`!<<*#!<<*#oDf-t!<<-$!!!$#_>o/fli@%ejoGD_[K(mZnc8(Y
U]>uHrW)ouoDnjkQiM^<JcLB&JcLB&JcLB&JcLB&JcLB&_Z58gJcLB&JcLB&JcLB&JcLB&JcLB&JcLB&
JcLB&iW+K~>

%%EndBinary
grestore
np
170.08 159.55 mo
170.08 128.24 208.15 102.86 255.12 102.86 cv
302.08 102.86 340.16 128.24 340.16 159.55 cv
340.16 190.86 302.08 216.24 255.12 216.24 cv
208.15 216.24 170.08 190.86 170.08 159.55 cv
cp
.62768 .28513 0 0 cmyk
ef
.75075 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
170.08 159.55 mo
170.08 128.24 208.15 102.86 255.12 102.86 cv
302.08 102.86 340.16 128.24 340.16 159.55 cv
340.16 190.86 302.08 216.24 255.12 216.24 cv
208.15 216.24 170.08 190.86 170.08 159.55 cv
cp
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
.216 sep
@
0 0 0 0 cmyk
%ADOBeginSubsetFont: LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H)
%%Title: (LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-8 -141 1000 859} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 28779 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 7 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
11096 <001C60D8A8C9B5EE310352EECF602406C0329E1B650528DB4C10B129B
B86AB3C12935CB6FB7137A27A4BA4BEB46A65DAD78F0FC83B360EEE112A0140E
5C390E0E8EA3F7C92786B3B9AEC46703437C6A2C28887BC820512583CC7836E1
6D9ED939B7910787CC00FECD1FAB2728E0DD9BB16E5A032E9D9C282EE7E5018D
8A717D033E0D418BFBCD53BB45AE5E336455171952814514E50B44AA1AEE4E2B
A7EABEE344264E734E0036C35C14833C943CA22B41707903D5915EBE3D492EC> |
6247 <001C60D8A8C9B5EE310366CF9D3A5DBD83A75670FEE48A3F8FEFF4D8BA
34E9FDA01926F70F3C27368833BB6124C03AFEF6B0B6B243C8B82F88BF1348BE
9B645803E8FE9207FE2DFE1BAA4A373F38CC5F048E6E2D864D9DF9766EDA153B
1AC74BBF354409B3D8FAB31BD60AB5561805E76920AB986708824BA1E9B74032
99C77825A60D3D8271450A804C6E50> |
2561 <001C60D8A8C9B5EE310D5F6264DDAC9A7D49E014BEF9C6116FF61A4840
31C856B1BD0204D462DD6FD66A4101C9245C17A13113C7612640C36F4CE73446
A819D7F4C108F1CD0E733243FEAAD9D4820BEBEA4E3FEDCD4901DCC3904D3DD7
B4CC02350606B23B2106E8CE9A8222D64302FF9A4EC43E4F3AE7E1B5120A20A6
F410DB659EECA91567403DB7D0CB06BFA86CE7975498608CF4295B9DC34CAFB1
742270156CB9BB1BAEB05623172A2513EF47025D4DD9C402BF5A9F0719B2C68F
CE3EF6764697A11F8EB6B09E12896DB2831D92947C9DE923DF56380B7787C48B
CBD731E809994312A00924026E5F6465D21171DC287BAAA9AA9EDD58B99EE3F4
38E96A3FA32635BDD6309FF887A45D120DF41493560E17> |
17319 <001C60D8A8C9B5EE3103DB6EAED5A1899DE430DBABCA2B64C09FFCD4D
7DF0D372A06C691FAB354EFFB349FDC54701B9486013ACA54D4EFAF03BE551DF
04965863CE4217F0B0EE72E68D8EFEB129BD739B842801B66D8977F38FC5E9F2
F3DA156E53BF51F8A9268A74B71D637B6037CA972553FA610B922553862CAB18
807EB590CB66E38D20DACF87F95768E997902BE974E4BBCD50B59E5719658C5F
EA50DB8FEF439DE74C169039F53322FAF166C0F235B1FB38ADA45F5473FC22AC
1AEE9AD058938AC5414C51AFDBF130A15FE7CC4BD0995E20BBDACC1C87FA81EE
F697A04D3C27A85ACED6A5648AD36FFB5469B86A2FF9E830CE55F63952A9DEB8
CD48BAC062269E61F610B0ED64C267AF2A3C4786B3846C6C8FE105192298D87A
645E21BE22324DBDF0C515B48E4E6D8584AC2ED4616891489FEE99DCBDF89DA2
6AD472879B2496EF84C21CF> |
1211 <001C60D8A8C9B5EE31035A7D767AA2821836B6B70F5ED7A5EBACD66110
268F33CA2D2F9AAE923BB87487B609F5D9B7A1FFAC936D8F078B203D03FC1C3A
2CC66FB036EF44B13255E233D4D966AB78CB59660C65B4A6F26B9BFD9E804701
32797038B4264A560855D57DEF7BA8560C982056C4D8EA1A0664DDF0E5806B55
5797A1F2E1B2DAA953426F871018B1D7A782CADEE414265D49D4B523FCD88537
A1E0C78E789CE27E675F2BFA00F1AE6ADB07FA19D8A77CABC0C940D2E1874B24
B4A847F8BFB9B6A939546952DFB1403F074C15D9BBC53C9B680D687C753730C8
FA6B4276A80D2D4C2A9A10F24D085C745EC709DA10007EB516337948FB5EC383
83B7E8C2B3CD7DE77483575390F916B0DBA6C8F5BE794DB447CDBD398132F2A2
D07E32FF5FC7F4EBC7E8F560E9> |
1318 <001C60D8A8C9B5EE31025027D9903D87997EFE29CDC9B7798D759052E8
4D451ED65E9C94C44482A60C8E4F10111F444846D5FED3C114FD1B83772ACD32
7627BE917B2C008787798E972AF250FD4E55DDC09981BE69043F290EB1CA3339
30121AAE1BD771AB624215595C11CCF7856EFC126CA70DB137C6379CADBE8D17
8BE2EE42C4014F22EB4429A901308AC5001DF3CD110A36DFCF1829CBC8C04F00
E18F814DD7E36A166830512375294BC43D3772C2A5F1E8456B9315E95D69F100
661A6CB4FBB769E6370FE745E388E6C36E724B3CEC2FA170100930> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H /Identity-H 0 [/LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [14.275 0 0 -14.275 0 0 ]msf
213.4 164.35 mo
(+X\030g\012\001C\247\004\273\005&)
[14.275 13.4756 14.275 14.2179 13.5042 0 ]xsh
366.75 348 mo
144 348 li
144 253.5 li
366.75 253.5 li
366.75 348 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 841.5 ]ct
[224.25 0 0 96 143.25 492.75 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 299 
/H 128 
/M[299 0 0 -128 0 128 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 299 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 299 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 299 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 299 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&ZiG[X
JcLB&JcLB&JcLB&nc4dQJcX=$o)Jgm!!'h9JcVeNmJuYUJcUH(q>p!aS-"9Dbl[G9"9AQ+":!!PJd%kP
"U5/6!s/Ms!!<6&!WhutJcpZ.ncT!p!Wr#p!s&B%!i,gJ!6"p<!qQBl!mUdt!/^a]!<WQ6%1NdWJe!AB
lOF%,$O?k:p&G-q!sGY/Jd/pn":,/8!<W0!q>^Qt!<A&ZJcX^/rVup"W;qMMUAtGu!X9)H(?QHc(kWY*
'a"sP!s/2t"T\T+"pbU$%"\o<$j-hA"p4N!!!0b5JcLB&JcLB&m/R=k":,PV*ZppqJfr>]"Wn^!$O$S+
!!NH/#R_.Saq'(7TFV,7$3g\.!!<6%!<MinJcLB&JcLB&\,Z^6":5\\+XGJ\Jg6[."X+s'%0Q_,!!`T0
#S%@V&J9U,Je@;\":u+P"p+Gu!!3#u!!02%JcN@^!!<&uJcLB&ci=7N!soV],:'iHJgIZJ"XG3-%0ck.
!!E?,#n@R0&qUaL')rLE$j["/!!!%_!.k4%!!!&&!.k3?!!WH+#nn=',k!%2-%[H?,m>P:(C^QLp](Eu
"UY_OS.^Ddc4U6k&.AgI\c@<^T`>&nirFZ2JcOm4"p"f4'-/8BV'U^>`[(d6+;YIk!VcWt!X/o@&^_5C
&t'@8&.f6U"Rc>B!.k4:!!!%f!.k3X!;um%!<WWA*?lbg-%[H",m>P:(C^QLp](Eu"UY_O\IsK,Yn@0N
&.AgIf)UC&KE)#R!.k3&!6>-E!<WWA*?lcG-%[GB,m>P:(C^QLp](Eu"UY_OmLk*aJeIqn":u+Q#R$+e
JcO'r!!0M.JcLu7"p"f4'-/8BpEbD;JgL"7"XG3,%0ck.!!E?,$4[ZD&qUb9&d/aW$j[!Q!.k3=!!!&c
!.k3&!8RVZ!<WWA*?lc2-%[GW,m>P:(C^QLr;c`q"9J`6%M=X4JeHoQ":u+Q#R%.-JcN%U!!1OKJcLB&
o`,0s!soV]+s`F"JgJto"XG3,%0ck.!!E?,$4[Za&qUaq&d/aW$j[!n!.k3&!;c`r!Jpf.!5JR=!<WWA
*?lcO-%[G:,m>P:(C^QLp](Eu"UY_Op(DriJeIYf":u+Q#R$CmJcNdj!!0e6JcL]/#QY#6'-/8B,pe-h
JgK_/"XG3,%0ck.!!E?,$4[ZL&qUb1&d/aW$j["6!.k3&!8[\U!N#jK!2BMu!<WWA*?lcl-%[Fr,lo86
!uDCN!VcWt!X/o@&X3o['%RZu&.f6U"L8#Z!3#qu!S[U+!.k4<!!WH+#nn=',b665--de?,Tmm4"p+K!
"9J`6%M?eqJeFai":u+Q#R';jJcLB&o)JakOT9t5\,Z^6!soV]+sbS_JgHg2"XG3,%0ck.!!E?,$4[[I
&qUaJ''g/5&.f6U"J#OE!58F5!VcYH!.k3t!!WH+#nn=',e>:R-*\a",Tmm4"p+K!"9J`6%M@h9JeE_L
rt#5?#R#h]JcO@%!!05&JcM8?"p"f4'-/8Bmj3Q3JgL:?"XG3,%0ck.!!E?,$4[Z<&qUbA&d/aW$j[!I
!.k3E!!!&[!.k3&!9F1b!<WWA*?lc*-%[G_,m>P:(C^QLp](Eu"UY_Od1V$DR1]W6&.AgImf7q>JcP*:
!!/JfJcN.Xr;[$&!soV]+s`-oJgK8""XG3,%0ck.!!E?,$4[ZY&qUb$&d/aW$j[!f!.k3(!!**#JcLB&
a8cDF!soV]+sb#OJgIBB"XG3,%0ck.!!E?,$4[[9&qUaJ')N:E&.f6U"H<D5!6tQE!O_u[!0[Be!<WWA
*?ld'-%[Fp-1`Dd,Tmm4"p+K!"9J`6%M>KLJeH'9":u+Q#R&!EJcM2=!!2BcJcLB&h#IW[!soV]+sa9:
JgJ,W"XG3,%0ck3!;lg"!X/o@&W@?S'&F6(&.f6U"KDHR!3lM(!Rh%#!.k4D!!WH+#nn=',aB[--.X@G
,Tmm4"p+K!"9J`6%M?MiJeG$q":u+Q#R'#bJcLB&qZ$TsM#`,-^]4Q>!soV]+sb;WJgI*:"XG3,%0ck.
!!E?,$4[[A&qUaJ'(Z_=&.f6U"I/t=!6,!=!PSPc!/gg_!<WWA*?laT-%[Fp-0li\,Tmm4"p+K!"9J`6
%M>cTJeGd1":u+Q#R(&*JcLB&h>dNVV>u2JUAtK!!soV]+sc=tJgH'r!@/ci(C^QLp](Eu"UY_OPS/Q\
ee/)s&.AgIZ2fIVW;lo!gAlg*JcP0<"p"f4'-/8BSL&k6c6WW>+;YIk!VcWt!X/o@&]kZ;&top@&.f6U
"Qoc:!.k4B!!!%^!.k3\!!WH+#nn=',gmuj-(-%_,Tmm4"p+K!"9J`6%MA[QJeEYJlOj=3&.AgISH+6A
^&S-6p],mGJcO-t"p"f4'-/8B\g;qSYpBQ!+;YIk!VcWt!X/o@&`s^X&qgnt&-<7G"GHi-!7h,M!NlES
!1Nrm!<WWA*?lct-%[Fp-2Stl,Tmm4"p+K!"9J`6%M>3DJeH?A":u+Q#R%^=JcMJE!!2*[JcLB&jT#Jc
!soV]+sa!2JgJD_"XG3,%0ck.!!E?,$4[Zq&qUaa&d/aW$j[")!.k3&!:'Ub!LWq>!42b)!!WH+#nn='
,`O+%-/KpO,Tmm4"p+K!"9J`6%M?5aJeG=$":u+Q#R&`ZJcLH(!<E1P!.k3l!!WH+#nn=',f1jZ-)i0o
,Tmm4"p+K!"9J`6%MA+AJeEYJq[s#C&.AgIN<"P1c2[hF[K(mZP5kdf!soV]+scn/JgH!po-FPc+;YIk
!VcWt!X/o@&Yp%k'#kOe&.f6U"Mt.j!1<fe!UB`;!.k4,!!WH+#nn=',crAE-,(Z/,Tmm4"p+Z&qu?j$
"UY_ON"U^Th@]r&&.AgIWW7VNYlFb)df=t"JcPHD"p"f4'-/8BPpM#.eg1JF+;YIk!VcWt!X/o@&]#*3
&ucKH&.f6U"Q'32!.k4J!!!%V!.k3d!!WH+#nn=',g%Eb-(uUg,Tmm4"p+K!"9J`6%MACIJeEYJo+D0;
&.AgIPlQC9`W,u>^&W`bMZ="`!soV]+s\H\JgH!plQl][+;YIk!VcWt!X/o@&ZcUs'#"t]&.f6U"T/7O
!.k4-!!!%s!.k3G!!WH+#nn=',j-J*-%mQF,Tm1*%0ck.!!E?,$4[Z4&qUbI&d/aW$j[!A!.k3M!!!&S
!.k3&!:9aj!<WWA*?lc"-%[Gg,m>P:(C^QLp](Eu"UY_OaV'1<Tb7J>&.AgIk5^)6JcPBB!!/2^JcN:\
"p"f4'-/8BdNsJkR3`"^+;YIk!VcWt!X/o@&cNDp&qUb^&d/aW$j[!,!.k3b!!!&p!.k3&!71]M!<WWA
*?lc?-%[GJ,m>P:(C^QLp](Eu"UY_Ojq<7YKG+:r!Xo>;K`H])ec5[NXoO%RRfEWn!soV]+scV'JgH!p
q]uCk+;YIk!VcWt!X/o@&Y'Jc'$_*m&.f6U"M+Sb!20Am!TO03!.k44!!WH+#nn=',c)f=-,q57,Tmm4
"p+K!"9J`6%M@)$JeFIa":u+Q#R'SrJcLB&lMpncR/hg=ZiL%)"p"f4'-/8BN?s0&hB`=N+;YIk!VcWt
!X/o@&\/O+'!W&P&.f6U"P3X*!/(=Q!<@]OJcNjl"p"f4'-/8B_Bjd[W?h]n+;YIk!VcWt!X/o@&ag9`
&qUbn&d/aW$jZuq!.k3r!!!&.!.k37!!WH+#nn=',kiU:-%[H7,m>P:(C^QLp](Eu"UY_OU_87l`Y&Cc
&.AgI_>o/fR/d3flMuM:JcOU,"p"f4'-/8BXX/QF^*Nq.+;YIk!W<#r!!E?,$4[Z,&qUbQ&d/aW$j[!9
!.k3U!!!&K!.k3&!;-<r!<WWA*?lbo-%[Go,m>P:(C^QLp](Eu"UY_O_%M>4W=f=F&.AgIhZ/6.JcPZJ
!!.oVJcNRd"p"f4'-/8BasDWcTd9jf+;YIk!VcWt!X/o@&bZih&qUbf&d/aW$j[!$!.k3j!!!&6!.k3/
!!iT-#nn=',UFag-%[H/,m>P:(C^QLp](Eu"UY_OX:g*t^(LP[&.AgIquD<KJcOX-!!/qsJcMPG"p"f4
'-/8Bk9Y^+KI$XE+9NDh"p+K!"9J`6%M=p<JeHWI":u+Q#R%F5JcMbM!!1gSJcLB&m/R=k!soV]+s`^*
JgJ\g"XG3,%0ck.!!E?,$4[Zi&qUai&d/aW$j["!!.k3&!:p0j!KdA6!4W"5!<WWA*?lcW-%[G2,m>P:
(C^QLp](Eu"UY_OrXseqJeIA^":u+Q#R$[uJcNLb!!2ipJcLB&ci=7N!soV]+sa`GJgIZJ"XG3,%0ck.
!!E?,$4[[1&qUaL')rLE$jZui!.k4%!!!&&!.k3?!!WH+#nn=',k!%2-%[H?,m>P:(C^QLp](Eu"UY_O
S.^Ddc4U6k&.AgI\c@<^T`>&nirFZ2JcOm4"p"f4'-/8BV'U^>`[(d6+;YIk!VcWt!X/o@&^_5C&t'@8
&.f6U"Rc>B!.k4:!!!%f!.k3X!;um%!<WWA*?lbg-%[H",m>P:(C^QLp](Eu"UY_O\IsK,Yn@0N&.AgI
f)UC&KE)#R!.k3&!6>-E!<WWA*?lcG-%[GB,m>P:(C^QLp](Eu"UY_OmLk*aJeIqn":u+Q#R$+eJcO'r
!!0M.JcLu7"p"f4'-/8BpEbD;JgL"7"XG3,%0ck.!!E?,$4[ZD&qUb9&d/aW$j[!Q!.k3=!!!&c!.k3&
!8RVZ!<WWA*?lc2-%[GW,m>P:(C^QLr;c`q"9J`6%M=X4JeHoQ":u+Q#R%.-JcN%U!!1OKJcLB&o`,0s
!soV]+s`F"JgJto"XG3,%0ck.!!E?,$4[Za&qUaq&d/aW$j[!n!.k3&!;c`r!Jpf.!5JR=!<WWA*?lcO
-%[G:,m>P:(C^QLp](Eu"UY_Op(DriJeIYf":u+Q#R$CmJcNdj!!0e6JcL]/#QY#6'-/8B,pe-hJgK_/
"XG3,%0ck.!!E?,$4[ZL&qUb1&d/aW$j["6!.k3&!8[\U!N#jK!2BMu!<WWA*?lcl-%[Fr,lo86!uDCN
!VcWt!X/o@&X3o['%RZu&.f6U"L8#Z!3#qu!S[U+!.k4<!!WH+#nn=',b665--de?,Tmm4"p+K!"9J`6
%M?eqJeFai":u+Q#R';jJcLB&o)JakOT9t5\,Z^6!soV]+sbS_JgHg2"XG3,%0ck.!!E?,$4[[I&qUaJ
''g/5&.f6U"J#OE!58F5!VcYH!.k3t!!WH+#nn=',e>:R-*\a",Tmm4"p+K!"9J`6%M@h9JeE_Lrt#5?
#R#h]JcO@%!!05&JcM8?"p"f4'-/8Bmj3Q3JgL:?"XG3,%0ck.!!E?,$4[Z<&qUbA&d/aW$j[!I!.k3E
!!!&[!.k3&!9F1b!<WWA*?lc*-%[G_,m>P:(C^QLp](Eu"UY_Od1V$DR1]W6&.AgImf7q>JcP*:!!/Jf
JcN.Xr;[$&!soV]+s`-oJgK8""XG3,%0ck.!!E?,$4[ZY&qUb$&d/aW$j[!f!.k3(!!**#JcLB&a8cDF
!soV]+sb#OJgIBB"XG3,%0ck.!!E?,$4[[9&qUaJ')N:E&.f6U"H<D5!6tQE!O_u[!0[Be!<WWA*?ld'
-%[Fp-1`Dd,Tmm4"p+K!"9J`6%M>KLJeH'9":u+Q#R&!EJcM2=!!2BcJcLB&h#IW[!soV]+sa9:JgJ,W
"XG3,%0ck3!;lg"!X/o@&W@?S'&F6(&.f6U"KDHR!3lM(!Rh%#!.k4D!!WH+#nn=',aB[--.X@G,Tmm4
"p+K!"9J`6%M?MiJeG$q":u+Q#R'#bJcLB&qZ$TsM#`,-^]4Q>!soV]+sb;WJgI*:"XG3,%0ck.!!E?,
$4[[A&qUaJ'(Z_=&.f6U"I/t=!6,!=!PSPc!/gg_!<WWA*?laT-%[Fp-0li\,Tmm4"p+K!"9J`6%M>cT
JeGd1":u+Q#R(&*JcLB&h>dNVV>u2JUAtK!!soV]+sc=tJgH'r!@/ci(C^QLp](Eu"UY_OPS/Q\ee/)s
&.AgIZ2fIVW;lo!gAlg*JcP0<"p"f4'-/8BSL&k6c6WW>+;YIk!VcWt!X/o@&]kZ;&top@&.f6U"Qoc:
!.k4B!!!%^!.k3\!!WH+#nn=',gmuj-(-%_,Tmm4"p+K!"9J`6%MA[QJeEYJlOj=3&.AgISH+6A^&S-6
p],mGJcO-t"p"f4'-/8B\g;qSYpBQ!+;YIk!VcWt!X/o@&`s^X&qgnt&-<7G"GHi-!7h,M!NlES!1Nrm
!<WWA*?lct-%[Fp-2Stl,Tmm4"p+K!"9J`6%M>3DJeH?A":u+Q#R%^=JcMJE!!2*[JcLB&jT#Jc!soV]
+sa!2JgJD_"XG3,%0ck.!!E?,$4[Zq&qUaa&d/aW$j[")!.k3&!:'Ub!LWq>!42b)!!WH+#nn=',`O+%
-/KpO,Tmm4"p+K!"9J`6%M?5aJeG=$":u+Q#R&`ZJcLH(!<E1P!.k3l!!WH+#nn=',f1jZ-)i0o,Tmm4
"p+K!"9J`6%MA+AJeEYJq[s#C&.AgIN<"P1c2[hF[K(mZP5kdf!soV]+scn/JgH!po-FPc+;YIk!VcWt
!X/o@&Yp%k'#kOe&.f6U"Mt.j!1<fe!UB`;!.k4,!!WH+#nn=',crAE-,(Z/,Tmm4"p+Z&qu?j$"UY_O
N"U^Th@]r&&.AgIWW7VNYlFb)df=t"JcPHD"p"f4'-/8BPpM#.eg1JF+;YIk!VcWt!X/o@&]#*3&ucKH
&.f6U"Q'32!.k4J!!!%V!.k3d!!WH+#nn=',g%Eb-(uUg,Tmm4"p+K!"9J`6%MACIJeEYJo+D0;&.AgI
PlQC9`W,u>^&W`bMZ="`!soV]+s\H\JgH!plQl][+;YIk!VcWt!X/o@&ZcUs'#"t]&.f6U"T/7O!.k4-
!!!%s!.k3G!!WH+#nn=',j-J*-%mQF,Tm1*%0ck.!!E?,$4[Z4&qUbI&d/aW$j[!A!.k3M!!!&S!.k3&
!:9aj!<WWA*?lc"-%[Gg,m>P:(C^QLp](Eu"UY_OaV'1<Tb7J>&.AgIk5^)6JcPBB!!/2^JcN:\"p"f4
'-/8BdNsJkR3`"^+;YIk!VcWt!X/o@&cNDp&qUb^&d/aW$j[!,!.k3b!!!&p!.k3&!71]M!<WWA*?lc?
-%[GJ,m>P:(C^QLp](Eu"UY_Ojq<7YKG+:r!Xo>;K`H])ec5[NXoO%RRfEWn!soV]+scV'JgH!pq]uCk
+;YIk!VcWt!X/o@&Y'Jc'$_*m&.f6U"M+Sb!20Am!TO03!.k44!!WH+#nn=',c)f=-,q57,Tmm4"p+K!
"9J`6%M@)$JeFIa":u+Q#R'SrJcLB&lMpncR/hg=ZiL%)"p"f4'-/8BN?s0&hB`=N+;YIk!VcWt!X/o@
&\/O+'!W&P&.f6U"P3X*!/(=Q!<@]OJcNjl"p"f4'-/8B_Bjd[W?h]n+;YIk!VcWt!X/o@&ag9`&qUbn
&d/aW$jZuq!.k3r!!!&.!.k37!!WH+#nn=',kiU:-%[H7,m>P:(C^QLp](Eu"UY_OU_87l`Y&Cc&.AgI
_>o/fR/d3flMuM:JcOU,"p"f4'-/8BXX/QF^*Nq.+;YIk!W<#r!!E?,$4[Z,&qUbQ&d/aW$j[!9!.k3U
!!!&K!.k3&!;-<r!<WWA*?lbo-%[Go,m>P:(C^QLp](Eu"UY_O_%M>4W=f=F&.AgIhZ/6.JcPZJ!!.oV
JcNRd"p"f4'-/8BasDWcTd9jf+;YIk!VcWt!X/o@&bZih&qUbf&d/aW$j[!$!.k3j!!!&6!.k3/!!iT-
#nn=',UFag-%[H/,m>P:(C^QLp](Eu"UY_OX:g*t^(LP[&.AgIquD<KJcOX-!!/qsJcMPG"p"f4'-/8B
k9Y^+KI$XE+9NDh"p+K!"9J`6%M=p<JeHWI":u+Q#R%F5JcMbM!!1gSJcLB&m/R=k!soV]+s`^*JgJ\g
"XG3,%0ck.!!E?,$4[Zi&qUai&d/aW$j["!!.k3&!:p0j!KdA6!4W"5!<WWA*?lcW-%[G2,m>P:(C^QL
p](Eu"UY_OrXseqJeIA^":u+Q#R$[uJcNLb!!2ipJcLB&ci=7N!soV]+sa`GJgIZJ"XG3,%0ck.!!E?,
$4[[1&qUaL')rLE$jZui!.k4%!!!&&!.k3?!!WH+#nn=',k!%2-%[H?,m>P:(C^QLp](Eu"UY_OS.^Dd
c4U6k&.AgI\c@<^T`>&nirFZ2JcOm4"p"f4'-/8BV'U^>`[(d6+;YIk!VcWt!X/o@&^_5C&t'@8&.f6U
"Rc>B!.k4:!!!%f!.k3X!;um%!<WWA*?uhh-%[H",m>P:(_$ZMp](Eu"UY_O\IsK,Yn@0N&.AgIf)UC&
KE)#R!.k3&!6>-E!<WW@*$?ND,D%/>,6]54((:<Hp](I!"UGSJ&FU3_&V:Vl&HiXV$O6_'!!!%j!.k3n
!!!)3!.k37!!WH,#S@pq+SR%2+bCm0+U0&3*>Jqb!VcWu!sT&@%hGKKJe?$8"V2.S$3gP*!!!&E!.k39
!!!)h!.k3&!8RVY!<NK8',[egJf26>";VOT!s/?#r;[!%!!<E3%#bXI%GhNs$O[4D!quZr!<</0!.k3U
!!30$!S%1%!.k4C!!E<)#Rq9.&:tJE&-NLR$3^M*!!E<("9o+I#_E>]#QkA;"TnAt!!3#umK%n?JcY`L
"98H&!<Mop!!8MfJcNOc"T\Z,"U>:T#(d&R"pG5:"p=u.pAb0orW3''p&fmKJckQG!X&N)o)Jgm!!/nr
JcNgk!s&B%!l+ef!/U^U!W3"N!eLL<!ri;o!!30$!il<Q!5/@5!Wi,tp]-3QJcX[.!<</!!.k3S!!!)N
!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3X!.k3&!.k3&!.k3&
!.k3&!.k3&!.k3C!.Y~>

%%EndBinary
grestore
np
148.82 341.27 mo
361.42 341.27 li
361.42 256.231 li
148.82 256.231 li
cp
.62768 .28513 0 0 cmyk
ef
148.82 341.27 mo
361.42 341.27 li
361.42 256.231 li
148.82 256.231 li
cp
1 /0 /CSD get_res sepcs
.216 sep
@
0 0 0 0 cmyk
%ADOBeginSubsetFont: LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H 5 GetGlyphDirectory
6615 <001C60D8A8C9B5EE31027CAD67CEC802B12240EA84FE047966011276DD
CECE77ED752D5708548F686280DED73ED022750643227BDEBDA9426C2D198CC3
3FEFD0DEC907091A3CA592C8744EC95318F95183A052EABAB14793C64614301F
7A302A2F81C050DF6D8C54C12A3D56302FD2BA6953AA4A3077100BEB52E18E39
028946FBA34F9DA73F8827BAD57EA7727F3DF87F63A659504300750F3A1E6797
D9025DA8DBAFDB79EADD94031802EB1C1CDEBBA0B5754116FDD2AC18DF1D3EA9
678EC8F16C527C436626C2F4B323C7957256B3C39579BF9EB39B81EE9B55E371
57C4E2EA452E615E4A9D65165D7D805D2704F0646CB9135EFBF13F19B377C522
0B9BFB7E272A616F8493EBC11D951741DE6142F3970667CE83DF592FC43AFF0A
77E87C647AFDACBE1926D4C00419DA926DEB8F775E1FC59BE0E64C3EC2176435
937C4E577E4EFCA23A2C429D7C25D48ADBBD3E8FB4727B20D6F1E2EF4DFEE9AB
777D27FFEFABCDCC3BA903974ABE25C4AC69B2834129DBEA80ECFA4C83BC7BE7
F53C9A> |
2150 <001C60D8A8C9B5EE3103DB78D3EA56D6230973C8E7FDF7C51DDA179713
23AB37F3939429E9D68FD39F543416574B569FD252836122D0D254958302B3EF
30FF87DD8C03DFAC3666F2D707BCEDCFADD25F8E5AEBB4955A228C9F31951123
CB2AD5AB1BE101072808E82CCAB088597C0FA6BE54F5EB84896EBCA537E67185
5A9E15D348CBD51F3043CDCCBCFA16FE36787B352E008A498D0E8F8ED985C664
09F0C35CC934D3285CFEC6213E2BF23024E08B0CECBEAF19D7349036DE96E769
1C51D2E43D8892A173DA0905789EC841070870E1993465A2E65787204FFFF8B4
5EF5849FEFD3BEED88389453244BBD2A525528BD65FB585BDA3701C2B5DF69B1
C0EA3C94AB4B59C713FF8E3CD440AF84B240EA3D22D15DABA1DCF5E9675DBCF8
B2BA300ACF90703AC1B9617E96D4F9A0B32EBFF20D8294C739> |
3224 <001C60D8A8C9B5EE310226F8FF518033B48DA7E4230787D177DBCAE877
0C610C08760A44AB2F3EBBCDAAFCBC248AD058AFBBDA3E5E07A7344FF149C360
496643B1EAF9650913A5354A7522E9CD7F21DA2D6AA1EFFD937431C8D9E829BA
69964D37BCE5DF553FE41E559FC261B96DA448EDD2F19E296AA7EC301883C500
25F2D976EABA732051A930B12E52356E0215BD8C2994B38AA4978782F53437DA
266CF2CAE6E532C8C142D3988C29230BFF5DAB9C57DCE7513F988E3B20BDAC80
B576CF2D176BB6F4FC7C32AC431E8AB908E91B0ADA67B9D879C25D501AFCA151
B3DBAF3F3A8BC4B032F08B53422F65A8D8F89A07D8A4F6AEF90B1E203181633C
01F294F1B300D54B22C750E90241F495C8BAFF23BA509473F047F8C17AEDFE32
C5413F9BF835703410CBD49B13C5887F818B20B8D4CCE240B48FF30C48CC8EE8
5829E3109B843709BFD640E0BAB8AE0A157E7714CEFC678C078865C25EBC1E9F
C1C328CCEF75AEAF5CA3E456008AB7F7AA216A8107007B1C631C151EBE1C3170
B108B9723A63174B9584C9A259A75FF2504707866B38B0058C99F93B> |
708 <001C60D8A8C9B5EE3103BF0CF9C90B27C7418D73AEC3724353C301B4F95
5A3AFBBE53C0836A80A54A7C7EABA491AD7020B7047AA350926C74431CC86A1E
EAD0ACEF1E6ABDF84AB3DCCE2F607EB04A343EFC2C9F2FF7721D14D34CB8778A
B708BCA01D75D> |
709 <001C60D8A8C9B5EE310275428E0ED5099F9F1E8D088CC64B9C725348739
C9FD3403BAED6A799C66E9AC709C6D22220A676D21EBAA12AE2454955AA4E066
78B98718C8DDE28F13064822D5FEA4F3D7A01387060106777632C0B3BBBDE050
E75FCB383E714> |
!
end
end end
%ADOEndSubsetFont
/LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [15.775 0 0 -15.775 0 0 ]msf
182.52 304.35 mo
(\031\327\010f\014\230)
[15.775 16.5164 0 ]xsh
230.6 304.35 mo
(\002\304)sh
%ADOBeginSubsetFont: NQPBAA+Calibri Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /NQPBAA+Calibri def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 67 /C put
dup 101 /e put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 116 /t put
def
/FontBBox {-503 -307 1240 1026} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
8 dict dup begin
/.notdef <1C60D8A8C9B7A086528E2CBE7FD4F03CC1C545DFC3C53F52C69233
4252531335C4AFD91E9493A7B9787114ADBF50CAD0D8D8F4E0FD112CA0EDC244
BC77AFB35E52902467E4B7D65BC23E8AB084EE08EDC3C9FE17948A4E93ECA5D5
D8A99AF099DAB98A96A7EEC3487AD5909F63F36A9F52E364FE794F0586CEACB0
693AEA3E3B131EDB924E9018AC085D5D058B3A8419D5096479413ADE107D9F53
02816818EECEB683CD82FAAA79E358EAA71283CC02664EE09C62BDF6E0D9BC98
D9F308DF8AEA61A9B7C090BD7FD96A3223C7AE0D3D1A8F2E623FA6B7C467CA6F
ECDBA0B792188DFEEBD3D01BCE6CC077D778842DE1B5E36F7F8EB4C68A439269
E0981B28AD1790AA058065E4B6AD27A659E12C7322A5BE1E7DF9729C0030192F
3688A380035351BB0945D5DC7515959F458727E2B8854977E466D6DDC900E997
B52F6BAB4C73A178A3B47EBB3C3FC842F51CC6E114336F3E4E5E72B20D8F94A7
BA3BA965E83BF37BAA664C34B8502BB9E9B9BEDD7EBC5DCBC4FFF5EBCA9C0324
49885D42A9DCCBA2A816B59D7978373DF4208E5608F69A2EAF492AC156CC637D
5A11AF573B17CF9F38> |-
/C <1C60D8A8C9B786996D057DD9ECF9C9FE8F34FA37C423F5980BE7D786896E
9EA4586FE497E33F39AB964ACDD89D26E486E7ED8F0DC4FBA51D700DEE7B191A
63C96E17E766A2327A1204635F41F9C49078958E183EEFB6984182E65EDA1F8B
441B6E4AB84D91335816B7734083F4F4FD892A7BCA407D109F62E4EE67EE6C6C
391D2BD510DDC6B5D5CC22D17AC103A7D2131E72C317F3BAC05393ECDC293B2E
CAB1568ADB4263F35E5423335599179483E82F60A5AD75F98D7415F42E948543
DCCF85D6B636864749244B612B22564859487973200635BA3DA904CEFECDBCC8
B01666891D22D161E426CFA4178953236E0C0CC024ABFD25C62F85F4D9DE2FD9
3AA1C37E4CC144A605E56698682CB24FC97AD3BD836F4B14863B5FD90FDACDF5
15F988F6144041EE6DE72D3696AC15A7CD39C4F2A134E2CF9BC30D1C6766E73F
C3D1AD93F0B1FE898AB1ACC306D4BD68327F6E0E6DF2C6B68065348695779B77
D4> |-
/e <1C60D8A8C9B7A9C0DC897A849B356D31E2254DD2E5BDA9320580C3E0839C
715C00D9D27B634D4BEEF0FE1F6AD3CCFBCCE9FDE38A84A563FB744619F62FCB
F09ACBF7337FE050BE068BCA744FAC4471C4195B7CEC353B3CAECCCEC91AAE22
E8955469041D97A8837F9398CE520ABB35C688EEF4229957FD92C79439BF99D2
4AD4D8B3CAC5B975D966AB01856E8FAEAE3BEB03E1CC76DF299391134BFB02DD
61F6D73B2AAAA0D725ABCA9FE504FB3A1EC1E2449C5D921F0DE45A9278013CF0
832F39E3771D2B318D27AFF5849066ED5A64AA8E3E404B520DE5F08BE74DD8D5
8BD1B0FA461EBCBB4DC632B680CFAE62B61DD4FC04FC017D59147CB2E0FBEAAF
A402B5BFBD0C4F13F4BD9227D1353527A23B3EF7CA3E7F599CB51DDAF43A5674
78E4C81011D9D8D5DAD9CB1F948F5FCE67> |-
/l <1C60D8A8C9B887F0644B8EDF7E394B2B17D648B60040EB6DBE2B8847CEEB
752ACB6F5AD37E1FA4A050E94786AD18088ED8DC4464B0DE1BE6F00A802A61F4
A34EAA84659717045B37042963C71284B8AC29AE9E0F8305F213AE4489E2DB55
EC12AFE94E44F64596D135D1BEB997D5B9A0BB5A35AE0E0CE05B7B1F89372931
9FB81429> |-
/n <1C60D8A8C9B78E05EAADB0123115B3BD5BA83FAABE276A1BF5A23DB55CF4
C30D8A20FB7C70B167834EB1FCB2A451DA55CBA774B9C40CA48F3B7AD8E41B3F
0C2665E2AF85619561E070ABE3E4EFEC9983825210D2A0599E48D162F3133798
2CE0D843D2D41F1F7924A343E37439CC75937984C88A0080C28B8BFBFB8F444A
FA11CBAA4BCF4C8D3087770F88F26B0A8B30E46AE29C6BF9720949C50E19D624
8BB58DE961D63651843F9B3B8EE9AA75CDE28D1F95D7703116FE7AA23945B580
8B97F9947888D114BE2523F872057145410E975A2CA83D430B49A7CAE2661901
2C2444BEBF6DC1397EFC38FADD0435CE6D4A1478744BC983827B31CF502C4487
AF1E48BBC2EB6153C1C5367B96A212BCD3FEE3B9DEC12C4E> |-
/o <1C60D8A8C9B78C66ECF3075BCC0F7D87F2E9EA9E473D66D53E6D1735C12E
AC0562A2F6FB428E7F7051A3A7B2D4CA6ED90F77808579359B7E539B5388F6F5
4555E1422B5F329989100C1CD5239E87FECD85E14E914ADC27391A1F5624B31E
E69A68B9016D73D6A01A100E004523AC53318A2FC2260E74BA80D4ABD1433EC6
7800CC9F77763DCF8156EA5CA478ABF1FAF7864EAD55939BE7FA4A9E8660CE98
DDE8CBC35F3FFF4E5C2DA4A292CE30D82057E70A8562AFB17C90FC331A4C46B4
8C7BBCED55DB7F94D559D534C59FF211B5A85F0207876BD8D6B2C7BBBC06964A
16F72BBAE841F001B71209E6C81DC64817ADE625E8FF> |-
/r <1C60D8A8C9B80F37F21112BA81A46E1A1A16E843530DEF66F6901DB9A722
A358478F1B0799F6041BFFF7D05EE602307D474F1DB84BF73C4EC1FF13A4D2D5
B370042C9A314A700782F944BCE36786AFBD72FA62259FABABA90F1F2BE008B7
993D5E1813324C60BD953524A1040FB1A790007846FA5DED6ACE6C7D436FF1C0
B97E4BBDDDA28F066E204B37F8321753E1473DDD8EE76C12A0011B04832F5C47
D3FF30EE31FE70EF82623D628622FAE52A70984ACD43F9718BC02CE5AA3F5832
FAB343FD6D53F2375C811D54E6B415E257D8BB3A2542930D7E0D6DF96FAA0688
822B6655966904164F87FA904C272BFAD51FAFF11CA14EBB5F6472235CA20889
D111211CF90F83807D99EF12B3B6827C1CA4720D03729BEEEA22A1313C4BDCE8
78453F5E6DCAD449D1F3B7D54D32C49DA0> |-
/t <1C60D8A8C9B81D89610FFBFD2F87712D18AB3F2201A6640C86A2CD8B533C
9E9613B748962BD3321D998A13FF4A410946A55D4AE3CDBD806BF0BBD38F8435
DE762245288A30426FF012946D0E2E36D4EBD7E81C44D06926164FB6F91AA67E
EAF9AC4BC77C470E117D4634F7F90C1771292F30769DD575DD5B3F0D104730DE
CDCF41E7D59747B6A2D0EF143B06FA6BBA4F9E744BD6E4827C627C6619571415
1061BE64BA6B45A36E91B80557E1CF613697CA2B60F02790B7CBE3BBB5ABEC19
0F88D2844D8139B7D141D834706D11BA3108576C531B823977B908AC9FF80DF3
22060C351BA43A8EA770319D1AF8085E209B940EDEE1B85419EF87F01EED1C4E
0307B2BC95989AC0998A9EA8A0DFB99539E7D0B836F4EB9E9D6147AFB55082A1
E63F64D57A8E7F63465BA308FA03AEB2787221627AF8F99523DB260C> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LCCJYC+Calibri /NQPBAA+Calibri findfont ct_VMDictPut
/LCCJYC+Calibri*1 
[67{/.notdef}rp /C 33{/.notdef}rp /e 6{/.notdef}rp /l /.notdef /n 
/o 2{/.notdef}rp /r /.notdef /t 139{/.notdef}rp]
LCCJYC+Calibri nf
LCCJYC+Calibri*1 [15.775 0 0 -15.775 0 0 ]msf
246.63 304.35 mo
(Controller)
[8.2504 8.99164 8.28177 5.22165 5.25305 8.99164 3.73862 2.99716 8.23459 0 ]xsh
/LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [15.775 0 0 -15.775 0 0 ]msf
312.33 304.35 mo
(\002\305)sh
366.75 473.25 mo
144 473.25 li
144 378 li
366.75 378 li
366.75 473.25 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 841.5 ]ct
[224.25 0 0 96.75 143.25 367.5 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 299 
/H 129 
/M[299 0 0 -129 0 129 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 299 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 299 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 299 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 299 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&ZiG[X
JcLB&JcLB&JcLB&nGn^QJcX@%nGrRi_#T&eVuQeug]2p+JcLB&JcNLb!s&E("N^at"/,f!"9JW*oDepn
!<`#sJc^N*o)\sq!<Vim!W`9%U]>uH`W,u>nGiOjcN&OsM?!b[!X&`6rX"/_JdL`L":>D<"9J5s"9AK'
!sYh1Jd&gk!X&Q,qZ-Kn!W`?'MZA>/h#RETW;qMMU&Y>t":5SO''Bp['8.#"&eG-Q#6Fr$!!NB("U>;=
PmW*Mf*V]g$4$h>!<Mrq!s&H'!l+ef!3-#%!<E0#!VQKn!pTc;!.k4<!!WH*#7hRg*1\+%*R>`1)]KV,
$3L>)!!NB'!s]5CaUWn4U(.>9%1ELH!quZr!<E8o!.k3&!:p0m!<<*#PQ6:8\,Z^6":,VY+<])VJg-X-
"sY93((16Gp](O$"pbVK%hTD*&V:V[&H`LO"Te>t!!0"uJcN@^!!<&uJcLB&ci=7N!soV\+="HCJg@TH
"X>*)$j6V+!!NE-#n7CWk7W@ZKG":t%g!+D!VHHm!L!M8!7CiI!jVfX!1Nrm!<WWA*?lct-%[Fp-2Stl
,Tmm4"p+K!"9J`6%M>3DJeH?A":u+Q#R%^=JcMJE!!2*[JcLB&jT#Jc!soV]+sa!2JgJD_"XG3,%0ck.
!!E?,$4[Zq&qUaa&d/aW$j[")!.k3&!:'Ub!LWq>!42b)!!WH+#nn=',`O+%-/KpO,Tmm4"p+K!"9J`6
%M?5aJeG=$":u+Q#R&`ZJcLH(!<E1P!.k3l!!WH+#nn=',f1jZ-)i0o,Tmm4"p+K!"9J`6%MA+AJeEYJ
q[s#C&.AgIN<"P1c2[hF[K(mZP5kdf!soV]+scn/JgH!po-FPc+;YIk!VcWt!X/o@&Yp%k'#kOe&.f6U
"Mt.j!1<fe!UB`;!.k4,!!WH+#nn=',crAE-,(Z/,Tmm4"p+Z&qu?j$"UY_ON"U^Th@]r&&.AgIWW7VN
YlFb)df=t"JcPHD"p"f4'-/8BPpM#.eg1JF+;YIk!VcWt!X/o@&]#*3&ucKH&.f6U"Q'32!.k4J!!!%V
!.k3d!!WH+#nn=',g%Eb-(uUg,Tmm4"p+K!"9J`6%MACIJeEYJo+D0;&.AgIPlQC9`W,u>^&W`bMZ="`
!soV]+s\H\JgH!plQl][+;YIk!VcWt!X/o@&ZcUs'#"t]&.f6U"T/7O!.k4-!!!%s!.k3G!!WH+#nn='
,j-J*-%mQF,Tm1*%0ck.!!E?,$4[Z4&qUbI&d/aW$j[!A!.k3M!!!&S!.k3&!:9aj!<WWA*?lc"-%[Gg
,m>P:(C^QLp](Eu"UY_OaV'1<Tb7J>&.AgIk5^)6JcPBB!!/2^JcN:\"p"f4'-/8BdNsJkR3`"^+;YIk
!VcWt!X/o@&cNDp&qUb^&d/aW$j[!,!.k3b!!!&p!.k3&!71]M!<WWA*?lc?-%[GJ,m>P:(C^QLp](Eu
"UY_Ojq<7YKG+:r!Xo>;K`H])ec5[NXoO%RRfEWn!soV]+scV'JgH!pq]uCk+;YIk!VcWt!X/o@&Y'Jc
'$_*m&.f6U"M+Sb!20Am!TO03!.k44!!WH+#nn=',c)f=-,q57,Tmm4"p+K!"9J`6%M@)$JeFIa":u+Q
#R'SrJcLB&lMpncR/hg=ZiL%)"p"f4'-/8BN?s0&hB`=N+;YIk!VcWt!X/o@&\/O+'!W&P&.f6U"P3X*
!/(=Q!<@]OJcNjl"p"f4'-/8B_Bjd[W?h]n+;YIk!VcWt!X/o@&ag9`&qUbn&d/aW$jZuq!.k3r!!!&.
!.k37!!WH+#nn=',kiU:-%[H7,m>P:(C^QLp](Eu"UY_OU_87l`Y&Cc&.AgI_>o/fR/d3flMuM:JcOU,
"p"f4'-/8BXX/QF^*Nq.+;YIk!W<#r!!E?,$4[Z,&qUbQ&d/aW$j[!9!.k3U!!!&K!.k3&!;-<r!<WWA
*?lbo-%[Go,m>P:(C^QLp](Eu"UY_O_%M>4W=f=F&.AgIhZ/6.JcPZJ!!.oVJcNRd"p"f4'-/8BasDWc
Td9jf+;YIk!VcWt!X/o@&bZih&qUbf&d/aW$j[!$!.k3j!!!&6!.k3/!!iT-#nn=',UFag-%[H/,m>P:
(C^QLp](Eu"UY_OX:g*t^(LP[&.AgIquD<KJcOX-!!/qsJcMPG"p"f4'-/8Bk9Y^+KI$XE+9NDh"p+K!
"9J`6%M=p<JeHWI":u+Q#R%F5JcMbM!!1gSJcLB&m/R=k!soV]+s`^*JgJ\g"XG3,%0ck.!!E?,$4[Zi
&qUai&d/aW$j["!!.k3&!:p0j!KdA6!4W"5!<WWA*?lcW-%[G2,m>P:(C^QLp](Eu"UY_OrXseqJeIA^
":u+Q#R$[uJcNLb!!2ipJcLB&ci=7N!soV]+sa`GJgIZJ"XG3,%0ck.!!E?,$4[[1&qUaL')rLE$jZui
!.k4%!!!&&!.k3?!!WH+#nn=',k!%2-%[H?,m>P:(C^QLp](Eu"UY_OS.^Ddc4U6k&.AgI\c@<^T`>&n
irFZ2JcOm4"p"f4'-/8BV'U^>`[(d6+;YIk!VcWt!X/o@&^_5C&t'@8&.f6U"Rc>B!.k4:!!!%f!.k3X
!;um%!<WWA*?lbg-%[H",m>P:(C^QLp](Eu"UY_O\IsK,Yn@0N&.AgIf)UC&KE)#R!.k3&!6>-E!<WWA
*?lcG-%[GB,m>P:(C^QLp](Eu"UY_OmLk*aJeIqn":u+Q#R$+eJcO'r!!0M.JcLu7"p"f4'-/8BpEbD;
JgL"7"XG3,%0ck.!!E?,$4[ZD&qUb9&d/aW$j[!Q!.k3=!!!&c!.k3&!8RVZ!<WWA*?lc2-%[GW,m>P:
(C^QLr;c`q"9J`6%M=X4JeHoQ":u+Q#R%.-JcN%U!!1OKJcLB&o`,0s!soV]+s`F"JgJto"XG3,%0ck.
!!E?,$4[Za&qUaq&d/aW$j[!n!.k3&!;c`r!Jpf.!5JR=!<WWA*?lcO-%[G:,m>P:(C^QLp](Eu"UY_O
p(DriJeIYf":u+Q#R$CmJcNdj!!0e6JcL]/#QY#6'-/8B,pe-hJgK_/"XG3,%0ck.!!E?,$4[ZL&qUb1
&d/aW$j["6!.k3&!8[\U!N#jK!2BMu!<WWA*?lcl-%[Fr,lo86!uDCN!VcWt!X/o@&X3o['%RZu&.f6U
"L8#Z!3#qu!S[U+!.k4<!!WH+#nn=',b665--de?,Tmm4"p+K!"9J`6%M?eqJeFai":u+Q#R';jJcLB&
o)JakOT9t5\,Z^6!soV]+sbS_JgHg2"XG3,%0ck.!!E?,$4[[I&qUaJ''g/5&.f6U"J#OE!58F5!VcYH
!.k3t!!WH+#nn=',e>:R-*\a",Tmm4"p+K!"9J`6%M@h9JeE_Lrt#5?#R#h]JcO@%!!05&JcM8?"p"f4
'-/8Bmj3Q3JgL:?"XG3,%0ck.!!E?,$4[Z<&qUbA&d/aW$j[!I!.k3E!!!&[!.k3&!9F1b!<WWA*?lc*
-%[G_,m>P:(C^QLp](Eu"UY_Od1V$DR1]W6&.AgImf7q>JcP*:!!/JfJcN.Xr;[$&!soV]+s`-oJgK8"
"XG3,%0ck.!!E?,$4[ZY&qUb$&d/aW$j[!f!.k3(!!**#JcLB&a8cDF!soV]+sb#OJgIBB"XG3,%0ck.
!!E?,$4[[9&qUaJ')N:E&.f6U"H<D5!6tQE!O_u[!0[Be!<WWA*?ld'-%[Fp-1`Dd,Tmm4"p+K!"9J`6
%M>KLJeH'9":u+Q#R&!EJcM2=!!2BcJcLB&h#IW[!soV]+sa9:JgJ,W"XG3,%0ck3!;lg"!X/o@&W@?S
'&F6(&.f6U"KDHR!3lM(!Rh%#!.k4D!!WH+#nn=',aB[--.X@G,Tmm4"p+K!"9J`6%M?MiJeG$q":u+Q
#R'#bJcLB&qZ$TsM#`,-^]4Q>!soV]+sb;WJgI*:"XG3,%0ck.!!E?,$4[[A&qUaJ'(Z_=&.f6U"I/t=
!6,!=!PSPc!/gg_!<WWA*?laT-%[Fp-0li\,Tmm4"p+K!"9J`6%M>cTJeGd1":u+Q#R(&*JcLB&h>dNV
V>u2JUAtK!!soV]+sc=tJgH'r!@/ci(C^QLp](Eu"UY_OPS/Q\ee/)s&.AgIZ2fIVW;lo!gAlg*JcP0<
"p"f4'-/8BSL&k6c6WW>+;YIk!VcWt!X/o@&]kZ;&top@&.f6U"Qoc:!.k4B!!!%^!.k3\!!WH+#nn='
,gmuj-(-%_,Tmm4"p+K!"9J`6%MA[QJeEYJlOj=3&.AgISH+6A^&S-6p],mGJcO-t"p"f4'-/8B\g;qS
YpBQ!+;YIk!VcWt!X/o@&`s^X&qgnt&-<7G"GHi-!7h,M!NlES!1Nrm!<WWA*?lct-%[Fp-2Stl,Tmm4
"p+K!"9J`6%M>3DJeH?A":u+Q#R%^=JcMJE!!2*[JcLB&jT#Jc!soV]+sa!2JgJD_"XG3,%0ck.!!E?,
$4[Zq&qUaa&d/aW$j[")!.k3&!:'Ub!LWq>!42b)!!WH+#nn=',`O+%-/KpO,Tmm4"p+K!"9J`6%M?5a
JeG=$":u+Q#R&`ZJcLH(!<E1P!.k3l!!WH+#nn=',f1jZ-)i0o,Tmm4"p+K!"9J`6%MA+AJeEYJq[s#C
&.AgIN<"P1c2[hF[K(mZP5kdf!soV]+scn/JgH!po-FPc+;YIk!VcWt!X/o@&Yp%k'#kOe&.f6U"Mt.j
!1<fe!UB`;!.k4,!!WH+#nn=',crAE-,(Z/,Tmm4"p+Z&qu?j$"UY_ON"U^Th@]r&&.AgIWW7VNYlFb)
df=t"JcPHD"p"f4'-/8BPpM#.eg1JF+;YIk!VcWt!X/o@&]#*3&ucKH&.f6U"Q'32!.k4J!!!%V!.k3d
!!WH+#nn=',g%Eb-(uUg,Tmm4"p+K!"9J`6%MACIJeEYJo+D0;&.AgIPlQC9`W,u>^&W`bMZ="`!soV]
+s\H\JgH!plQl][+;YIk!VcWt!X/o@&ZcUs'#"t]&.f6U"T/7O!.k4-!!!%s!.k3G!!WH+#nn=',j-J*
-%mQF,Tm1*%0ck.!!E?,$4[Z4&qUbI&d/aW$j[!A!.k3M!!!&S!.k3&!:9aj!<WWA*?lc"-%[Gg,m>P:
(C^QLp](Eu"UY_OaV'1<Tb7J>&.AgIk5^)6JcPBB!!/2^JcN:\"p"f4'-/8BdNsJkR3`"^+;YIk!VcWt
!X/o@&cNDp&qUb^&d/aW$j[!,!.k3b!!!&p!.k3&!71]M!<WWA*?lc?-%[GJ,m>P:(C^QLp](Eu"UY_O
jq<7YKG+:r!Xo>;K`H])ec5[NXoO%RRfEWn!soV]+scV'JgH!pq]uCk+;YIk!VcWt!X/o@&Y'Jc'$_*m
&.f6U"M+Sb!20Am!TO03!.k44!!WH+#nn=',c)f=-,q57,Tmm4"p+K!"9J`6%M@)$JeFIa":u+Q#R'Sr
JcLB&lMpncR/hg=ZiL%)"p"f4'-/8BN?s0&hB`=N+;YIk!VcWt!X/o@&\/O+'!W&P&.f6U"P3X*!/(=Q
!<@]OJcNjl"p"f4'-/8B_Bjd[W?h]n+;YIk!VcWt!X/o@&ag9`&qUbn&d/aW$jZuq!.k3r!!!&.!.k37
!!WH+#nn=',kiU:-%[H7,m>P:(C^QLp](Eu"UY_OU_87l`Y&Cc&.AgI_>o/fR/d3flMuM:JcOU,"p"f4
'-/8BXX/QF^*Nq.+;YIk!W<#r!!E?,$4[Z,&qUbQ&d/aW$j[!9!.k3U!!!&K!.k3&!;-<r!<WWA*?lbo
-%[Go,m>P:(C^QLp](Eu"UY_O_%M>4W=f=F&.AgIhZ/6.JcPZJ!!.oVJcNRd"p"f4'-/8BasDWcTd9jf
+;YIk!VcWt!X/o@&bZih&qUbf&d/aW$j[!$!.k3j!!!&6!.k3/!!iT-#nn=',UFag-%[H/,m>P:(C^QL
p](Eu"UY_OX:g*t^(LP[&.AgIquD<KJcOX-!!/qsJcMPG"p"f4'-/8Bk9Y^+KI$XE+9NDh"p+K!"9J`6
%M=p<JeHWI":u+Q#R%F5JcMbM!!1gSJcLB&m/R=k!soV]+s`^*JgJ\g"XG3,%0ck.!!E?,$4[Zi&qUai
&d/aW$j["!!.k3&!:p0j!KdA6!4W"5!<WWA*?lcW-%[G2,m>P:(C^QLp](Eu"UY_OrXseqJeIA^":u+Q
#R$[uJcNLb!!2ipJcLB&ci=7N!soV]+sa`GJgIZJ"XG3,%0ck.!!E?,$4[[1&qUaL')rLE$jZui!.k4%
!!!&&!.k3?!!WH+#nn=',k!%2-%[H?,m>P:(C^QLp](Eu"UY_OS.^Ddc4U6k&.AgI\c@<^T`>&nirFZ2
JcOm4"p"f4'-/8BV'U^>`[(d6+;YIk!VcWt!X/o@&^_5C&t'@8&.f6U"Rc>B!.k4:!!!%f!.k3X!;um%
!<WWA*?lbg-%[H",m>P:(C^QLp](Eu"UY_O\IsK,Yn@0N&.AgIf)UC&KE)#R!.k3&!6>-E!<WWA*?lcG
-%[GB,m>P:(C^QLp](Eu"UY_OmLk*aJeIqn":u+Q#R$+eJcO'r!!0M.JcLu7"p"f4'-/8BpEbD;JgL"7
"XG3,%0ck.!!E?,$4[ZD&qUb9&d/aW$j[!Q!.k3=!!!&c!.k3&!8RVZ!<WWA*?lc2-%[GW,m>P:(C^QL
r;c`q"9J`6%M=X4JeHoQ":u+Q#R%.-JcN%U!!1OKJcLB&o`,0s!soV]+s`F"JgJto"XG3,%0ck.!!E?,
$4[Za&qUaq&d/aW$j[!n!.k3&!;c`r!Jpf.!5JR=!<WWA*?lcO-%[G:,m>P:(C^QLp](Eu"UY_Op(Dri
JeIYf":u+Q#R$CmJcNdj!!0e6JcL]/#QY#6'-/8B,pe-hJgK_/"XG3,%0ck.!!E?,$4[ZL&qUb1&d/aW
$j["6!.k3&!8[\U!N#jK!2BMu!<WWA*?lcl-%[Fr,lo86!uDCN!VcWt!X/o@&X3o['%RZu&.f6U"L8#Z
!3#qu!S[U+!.k4<!!WH+#nn=',b665--de?,Tmm4"p+K!"9J`6%M?eqJeFai":u+Q#R';jJcLB&o)Jak
OT9t5\,Z^6!soV]+sbS_JgHg2"XG3,%0ck.!!E?,$4[[I&qUaJ''g/5&.f6U"J#OE!58F5!VcYH!.k3t
!!WH+#nn=',e>:R-*\a",Tmm4"p+K!"9J`6%M@h9JeE_Lrt#5?#R#h]JcO@%!!05&JcM8?"p"f4'-/8B
mj3Q3JgL:?"XG3,%0ck.!!E?,$4[Z<&qUbA&d/aW$j[!I!.k3E!!!&[!.k3&!9F1b!<WWA*?lc*-%[G_
,m>P:(C^QLp](Eu"UY_Od1V$DR1]W6&.AgImf7q>JcP*:!!/JfJcN.Xr;[$&!soV]+s`-oJgK8""XG3,
%0ck.!!E?,$4[ZY&qUb$&d/aW$j[!f!.k3(!!**#JcLB&a8cDF!soV]+sb#OJgIBB"XG3,%0ck.!!E?,
$4[[9&qUaJ')N:E&.f6U"H<D5!6tQE!O_u[!0[Be!<WWA*?ld'-%[Fp-1`Dd,Tmm4"p+K!"9J`6%M>KL
JeH'9":u+Q#R&!EJcM2=!!2BcJcLB&h#IW[!soV]+sa9:JgJ,W"XG3,%0ck3!;lg"!X/o@&W@?S'&F6(
&.f6U"KDHR!3lM(!Rh%#!.k4D!!WH+#nn=',aB[--.X@G,Tmm4"p+K!"9J`6%M?MiJeG$q":u+Q#R'#b
JcLB&qZ$TsM#`,-^]4Q>!soV]+sb;WJgI*:"XG3,%0ck.!!E?,$4[[A&qUaJ'(Z_=&.f6U"I/t=!6,!=
!PSPc!/gg_!<WWA*?laT-%[Fp-0li\,Tmm4"p+K!"9J`6%M>cTJeGd1":u+Q#R(&*JcLB&h>dNVV>u2J
UAtK!!soV]+sc=tJgH'r!@/ci(C^QLp](Eu"UY_OPS/Q\ee/)s&.AgIZ2fIVW;lo!gAlg*JcP0<"p"f4
'-/8BSL&k6c6WW>+;YIk!VcWt!X/o@&]kZ;&top@&.f6U"Qoc:!.k4B!!!%^!.k3\!!WH+#nn=',gmuj
-(-%_,Tmm4"p+K!"9J`6%MA[QJeEYJlOj=3&.AgISH+6A^&S-6p],mGJcO-t"p"f4'-/8B\g;qSYpBQ!
+;YIk!VcWt!X/o@&`s^X&qgnt&-<7G"GHi-!7h,M!NlES!1Nrm!<WWA*?lct-%[Fp-2Stl,Tmm4"p+K!
"9J`6%M>3DJeH?A":u+Q#R%^=JcMJE!!2*[JcLB&jT#Jc!soV]+sa!2JgJD_"XG3,%0ck.!!E?,$4[Zq
&qUaa&d/aW$j[")!.k3&!:'Ub!LWq>!42b)!!WH+#nn=',`O+%-/KpO,Tmm4"p+K!"9J`6%M?5aJeG=$
":u+Q#R&`ZJcLH(!<E1P!.k3l!!WH+#nn=(,f1jZ-)i0o,Tmp5"p+K!"9J`5%MA+AJeEYJq[s#C&.AgI
o`+smRK.p>c2[hF[K(mZP5kdf":5\\+XHe,Jg5jlo-4D^*u5:g!VcWu!sJr?%hPQLJe?!7":u+P"p+Gu
!!3#u!!1LJJcM&9!!;ThJcLB&h#IW[":,PV*ZqL,JfqcM"Wn]u$O$S0!;um%!<WH1$P*f.%tY>J%g*:J
"U4W#!s&B&!Or,]!3ZD&!S.7&!.k4C!!E?-%2'G@(kNUT(^(Qa#Qk,&!!E?+"pbUQ%"\nd$j-hC"p3Z^
JcLB&JcLB&^AnE<!s]/B%E]04%\X@8%1<FE!qlTq!WrSu#(d&2#4i$%#R1J6!qZHn!<AnrJcWjlrVup"
_#T&eM#[_\!WrQ0"U0J]Jd(KE"U5/6!s/Ms!!<6&!WfA*Jcrai!s&H)!W2rp!!<6%!!8)ZJcOU,!!;`l
!!9S/JcMGDirO`4JcPiPo)Jgm!!&5aJcXC&mJt'(JcVeNmJuYVJc^N*q>uKRJcLB&JcLB&JcLB&JcLB&
JcLB&JcLB&JcLB&JcN.XJcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcP$8J,~>

%%EndBinary
grestore
np
148.82 466.3 mo
361.42 466.3 li
361.42 381.261 li
148.82 381.261 li
cp
.62768 .28513 0 0 cmyk
ef
148.82 466.3 mo
361.42 466.3 li
361.42 381.261 li
148.82 381.261 li
cp
1 /0 /CSD get_res sepcs
.216 sep
@
0 0 0 0 cmyk
%ADOBeginSubsetFont: LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H 2 GetGlyphDirectory
16374 <001C60D8A8C9B5EE31009712B1677792AD2E60F84D4646604DF648B94
C6F974C0D398351576BD75F9CB49675346C71485FBC6DFD0F000DAF19D11991F
A7EDBCE35875934E7BD1B37A554FF6C3A4AE903CD0CA480505F07FEDEF7DCDEE
B7A199BE4B877C97BDCC8CAFCEC56451F2A0F67DCB99AD8286241474E49B8177
D49390F27805EBBE82900E2FC4F4B600BBB6BBEEF5FF26B01AC17721FCE3C72B
79B256FF3D8CE49765527ADC1E43F8F5ADBCCFFFC250E180B637FC77D12DB9B9
F68D99027DD3B67B909F605AE545507D262D68885366D4E6C912466BDB8066ED
B4CD77B6B26BC9B817CB5141FFFB9B634BF019EE5C0F1CDF7944A6175115C799
751B87000C5DD378306E1733852056FBA7C9CFE04FB21B4554BA626CA1186602
CCB9B22611E2D14FB5BCD60A2DA0C8650C1407BACDC856ACA83B4BAE7DA58060
12B7AEE4B947B6F6BE75DA1744D15A13DA299607588A5249E90CB340B91720BC
210F22B5DB17BB56CF2EECC71D01164CD24221569D711D57388A52E> |
3374 <001C60D8A8C9B5EE3100B249FE0972A1F213DE61D816DF1EAF23D42C08
0F518464B0E4071F77D6D6C42850EA4633881E106039D3E5A058ED2E3DD0406D
3DA23BCA01C13DA71313000B2116426CB411C9FC6BB7B4FA24746768B674FA67
17855C6D6142877D76C6C185231486C955453B5AF7550FA207164965E9817C74
E33F1ABF49998B1F6AA4E12B4726207884CB0435651AC11653B8400FC289A148
9C0A6E0F42ECE71ADF038302AF93C1A7D753E77EAAF8287678A1AF7EAEAAC6FB
04B751A6BB46E8AFA932D1BA07CBFD91820C5ED06F5C5F73DB7DD9D37D91F667
B2BFB6763DDA172F028EE8274FAF55E6F3B990DA4EAE953B08E9062E1F8AA65F
444AA40FA0865F2EAAE82CEF4A058CB789DE6BA9DD4C7A5D8D5346FAD43908B8
A1C2406C1CDBC2BA> |
!
end
end end
%ADOEndSubsetFont
/LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [14.275 0 0 -14.275 0 0 ]msf
213.33 428.82 mo
(?\366\015.)
[14.275 0 ]xsh
241.38 428.82 mo
(\002\304)sh
%ADOBeginSubsetFont: NQPBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
systemdict begin
LCCJYC+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/V <1C60D8A8C9B7E46D3595E262380DCCCAA6E0E0BA4C996D5098A92E632ED5
356A9916B4B99AB06AD951B62795F2944115780C872E7F123891EAF1856E4A40
2315D956ED20BB59B6DFC7B0C8DDFBBB6489AC9F05116C49F6645589E6E5C621
9DCD98FFCCF74F280D5CA828656CA0DEA4A3590C0CE2656E288F10B56FF6A653
4FAD666710C7E6204526D48A9BE83CD7E4DC0B2E8DF7D568501DDB0E18670BEB
F5CFC81A0AAE8E22C1553C764F7775B8986DD68E6C24BFBFC4A9922D2C513EA3
61E017749016E6C565BD94109B7E1999BA44DDA7D1D05F2F> |-
/i <1C60D8A8C9B887F0644B8F9A77200B5B21E7A46843656F48CC872DF3AFB5
8D86B9B1B70DF0F8BF4F1A9D845350075385C2FAC40F64A57A633024956B42D2
D155265D68692B1DD96FCB1CFEA6F03B67B191D75D9251636A71B366F484AC7D
D61A648087A690F42FCD56728047D5F145B28180BC49A70304D616C17E08688B
C2AB34D235D029750826D6A02D57888DCAF080A15DCB2D8AE91CB7938E088D74
26B3BCAD6531F243F29763FBDE3F087E3965B6148DD52590D1BA20021D15293C
FC> |-
/w <1C60D8A8C9B63EE6FBAC6FE430D4C472A6935E9E4E2C9D9C4ACB16C71B03
2F18FE575C6256D49A59D28FA55A64B8F4250FF7EF0F6440082EA55E50C72515
DB779850B563F18307F56C5AA0381D53908E3AA5F7BCF9144924A2084F07EBED
39B22484214EF3445C58E2A31D32B14DA61C85069056233A7D69EDE7D6EAE909
5E582A487ACDCAAEC9B696D9F56177DFCBED54097D97E802545B35B3AFF09395
2061133C2164E4C99E14CC43C1C5FB57627E18AF07CB58B73BD1200A30349006
897A1314704F9560B7EE765A767050BD02ED4C3CB6891E5FA019219CAF9310B1
24D9AF8C5E5547F89705BF1E11BA18C8C6F80D46BFB4F08BBC66AE29B2E81702
937C5AB98472DEAC74C8794C288DBFA220B7F896E2B36F9ECF06883A45930B94
0AFF017D9F3C209761AB734C6F3F199505CD5974FFC0917AC4E2B317FA15146D
5F8C2D8B2A0366984D71D35A1EAF824F2AB69DDEEC3EC469FA5796A63F524D8E
C40E97981C19E148BD51BA03455ACA08443ED8962BD3AB9091> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LCCJYC+Calibri /Encoding get
dup 86 /V put
dup 105 /i put
dup 119 /w put
pop
%ADOEndSubsetFont
/LCCJYC+Calibri*1 
[67{/.notdef}rp /C 18{/.notdef}rp /V 14{/.notdef}rp /e 3{/.notdef}rp /i 
2{/.notdef}rp /l /.notdef /n /o 2{/.notdef}rp /r /.notdef 
/t 2{/.notdef}rp /w 136{/.notdef}rp]
LCCJYC+Calibri nf
LCCJYC+Calibri*1 [14.275 0 0 -14.275 0 0 ]msf
255.38 428.82 mo
(View)
[8.26526 2.99768 6.78064 0 ]xsh
/LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [14.275 0 0 -14.275 0 0 ]msf
283.55 428.82 mo
(\002\305)sh
366.75 598.5 mo
144 598.5 li
144 503.25 li
366.75 503.25 li
366.75 598.5 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 841.5 ]ct
[224.25 0 0 96.75 143.25 242.25 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 299 
/H 129 
/M[299 0 0 -129 0 129 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 299 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 299 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 299 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 299 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&ZiG[X
JcLB&JcLB&JcLB&nc4dQJcX=$o)Jak^AricVZ6\th#N$,JcLB&JcNLb!s&H*"3C[t"JGr$"Tnl.!V?Bl
!qlYH!J1@D!<`Q-!s&Gq!!30$!2K[J!lb<A!<3)9!.k3:!!!)o!!<6)"pt59Jd[/<l3d\$"p4o"!!*0)
WWdtX^'+WD"Tnf,quHTo!s&B%!K7#1!87DQ!NH-O!3H5$!quZt!X/rD($69`(5!A&'*A^K"9J8t"9J]0
#mun)Jd^-;"Uk\A!s8St!!<6%!!0q:JcM_L!s&E&!T*m/!.k4<!!WH*#S7dm*h=C)+3u#5*Zc77$3L>)
!!WH)":,DG&'>H8&>B^>%hB$U"TnAtrrM`lJcLB&nc/XkOoU(6\,Z[5":>e]+OMEc,FKb[+<M@."9J8t
"9Sf7%1iFMJe<SHlOa71%LWIApAb9r!!*,$!.k3a!!<6%!!<&uJcLB&ci=7N!soV[+=+NEJgI]K"sbH:
(^pTLp](Eu"UPVKjq<7YKbF@r!Xo;:o`+smOoU(6f)YgOXoO%RRfEWn!soV]+scV'JgH!pq]uCk+;YIk
!VcWt!X/o@&Y'Jc'$_*m&.f6U"M+Sb!20Am!TO03!.k44!!WH+#nn=',c)f=-,q57,Tmm4"p+K!"9J`6
%M@)$JeFIa":u+Q#R'SrJcLB&lMpncR/hg=ZiL%)"p"f4'-/8BN?s0&hB`=N+;YIk!VcWt!X/o@&\/O+
'!W&P&.f6U"P3X*!/(=Q!<@]OJcNjl"p"f4'-/8B_Bjd[W?h]n+;YIk!VcWt!X/o@&ag9`&qUbn&d/aW
$jZuq!.k3r!!!&.!.k37!!WH+#nn=',kiU:-%[H7,m>P:(C^QLp](Eu"UY_OU_87l`Y&Cc&.AgI_>o/f
R/d3flMuM:JcOU,"p"f4'-/8BXX/QF^*Nq.+;YIk!W<#r!!E?,$4[Z,&qUbQ&d/aW$j[!9!.k3U!!!&K
!.k3&!;-<r!<WWA*?lbo-%[Go,m>P:(C^QLp](Eu"UY_O_%M>4W=f=F&.AgIhZ/6.JcPZJ!!.oVJcNRd
"p"f4'-/8BasDWcTd9jf+;YIk!VcWt!X/o@&bZih&qUbf&d/aW$j[!$!.k3j!!!&6!.k3/!!iT-#nn='
,UFag-%[H/,m>P:(C^QLp](Eu"UY_OX:g*t^(LP[&.AgIquD<KJcOX-!!/qsJcMPG"p"f4'-/8Bk9Y^+
KI$XE+9NDh"p+K!"9J`6%M=p<JeHWI":u+Q#R%F5JcMbM!!1gSJcLB&m/R=k!soV]+s`^*JgJ\g"XG3,
%0ck.!!E?,$4[Zi&qUai&d/aW$j["!!.k3&!:p0j!KdA6!4W"5!<WWA*?lcW-%[G2,m>P:(C^QLp](Eu
"UY_OrXseqJeIA^":u+Q#R$[uJcNLb!!2ipJcLB&ci=7N!soV]+sa`GJgIZJ"XG3,%0ck.!!E?,$4[[1
&qUaL')rLE$jZui!.k4%!!!&&!.k3?!!WH+#nn=',k!%2-%[H?,m>P:(C^QLp](Eu"UY_OS.^Ddc4U6k
&.AgI\c@<^T`>&nirFZ2JcOm4"p"f4'-/8BV'U^>`[(d6+;YIk!VcWt!X/o@&^_5C&t'@8&.f6U"Rc>B
!.k4:!!!%f!.k3X!;um%!<WWA*?lbg-%[H",m>P:(C^QLp](Eu"UY_O\IsK,Yn@0N&.AgIf)UC&KE)#R
!.k3&!6>-E!<WWA*?lcG-%[GB,m>P:(C^QLp](Eu"UY_OmLk*aJeIqn":u+Q#R$+eJcO'r!!0M.JcLu7
"p"f4'-/8BpEbD;JgL"7"XG3,%0ck.!!E?,$4[ZD&qUb9&d/aW$j[!Q!.k3=!!!&c!.k3&!8RVZ!<WWA
*?lc2-%[GW,m>P:(C^QLr;c`q"9J`6%M=X4JeHoQ":u+Q#R%.-JcN%U!!1OKJcLB&o`,0s!soV]+s`F"
JgJto"XG3,%0ck.!!E?,$4[Za&qUaq&d/aW$j[!n!.k3&!;c`r!Jpf.!5JR=!<WWA*?lcO-%[G:,m>P:
(C^QLp](Eu"UY_Op(DriJeIYf":u+Q#R$CmJcNdj!!0e6JcL]/#QY#6'-/8B,pe-hJgK_/"XG3,%0ck.
!!E?,$4[ZL&qUb1&d/aW$j["6!.k3&!8[\U!N#jK!2BMu!<WWA*?lcl-%[Fr,lo86!uDCN!VcWt!X/o@
&X3o['%RZu&.f6U"L8#Z!3#qu!S[U+!.k4<!!WH+#nn=',b665--de?,Tmm4"p+K!"9J`6%M?eqJeFai
":u+Q#R';jJcLB&o)JakOT9t5\,Z^6!soV]+sbS_JgHg2"XG3,%0ck.!!E?,$4[[I&qUaJ''g/5&.f6U
"J#OE!58F5!VcYH!.k3t!!WH+#nn=',e>:R-*\a",Tmm4"p+K!"9J`6%M@h9JeE_Lrt#5?#R#h]JcO@%
!!05&JcM8?"p"f4'-/8Bmj3Q3JgL:?"XG3,%0ck.!!E?,$4[Z<&qUbA&d/aW$j[!I!.k3E!!!&[!.k3&
!9F1b!<WWA*?lc*-%[G_,m>P:(C^QLp](Eu"UY_Od1V$DR1]W6&.AgImf7q>JcP*:!!/JfJcN.Xr;[$&
!soV]+s`-oJgK8""XG3,%0ck.!!E?,$4[ZY&qUb$&d/aW$j[!f!.k3(!!**#JcLB&a8cDF!soV]+sb#O
JgIBB"XG3,%0ck.!!E?,$4[[9&qUaJ')N:E&.f6U"H<D5!6tQE!O_u[!0[Be!<WWA*?ld'-%[Fp-1`Dd
,Tmm4"p+K!"9J`6%M>KLJeH'9":u+Q#R&!EJcM2=!!2BcJcLB&h#IW[!soV]+sa9:JgJ,W"XG3,%0ck3
!;lg"!X/o@&W@?S'&F6(&.f6U"KDHR!3lM(!Rh%#!.k4D!!WH+#nn=',aB[--.X@G,Tmm4"p+K!"9J`6
%M?MiJeG$q":u+Q#R'#bJcLB&qZ$TsM#`,-^]4Q>!soV]+sb;WJgI*:"XG3,%0ck.!!E?,$4[[A&qUaJ
'(Z_=&.f6U"I/t=!6,!=!PSPc!/gg_!<WWA*?laT-%[Fp-0li\,Tmm4"p+K!"9J`6%M>cTJeGd1":u+Q
#R(&*JcLB&h>dNVV>u2JUAtK!!soV]+sc=tJgH'r!@/ci(C^QLp](Eu"UY_OPS/Q\ee/)s&.AgIZ2fIV
W;lo!gAlg*JcP0<"p"f4'-/8BSL&k6c6WW>+;YIk!VcWt!X/o@&]kZ;&top@&.f6U"Qoc:!.k4B!!!%^
!.k3\!!WH+#nn=',gmuj-(-%_,Tmm4"p+K!"9J`6%MA[QJeEYJlOj=3&.AgISH+6A^&S-6p],mGJcO-t
"p"f4'-/8B\g;qSYpBQ!+;YIk!VcWt!X/o@&`s^X&qgnt&-<7G"GHi-!7h,M!NlES!1Nrm!<WWA*?lct
-%[Fp-2Stl,Tmm4"p+K!"9J`6%M>3DJeH?A":u+Q#R%^=JcMJE!!2*[JcLB&jT#Jc!soV]+sa!2JgJD_
"XG3,%0ck.!!E?,$4[Zq&qUaa&d/aW$j[")!.k3&!:'Ub!LWq>!42b)!!WH+#nn=',`O+%-/KpO,Tmm4
"p+K!"9J`6%M?5aJeG=$":u+Q#R&`ZJcLH(!<E1P!.k3l!!WH+#nn=',f1jZ-)i0o,Tmm4"p+K!"9J`6
%MA+AJeEYJq[s#C&.AgIN<"P1c2[hF[K(mZP5kdf!soV]+scn/JgH!po-FPc+;YIk!VcWt!X/o@&Yp%k
'#kOe&.f6U"Mt.j!1<fe!UB`;!.k4,!!WH+#nn=',crAE-,(Z/,Tmm4"p+Z&qu?j$"UY_ON"U^Th@]r&
&.AgIWW7VNYlFb)df=t"JcPHD"p"f4'-/8BPpM#.eg1JF+;YIk!VcWt!X/o@&]#*3&ucKH&.f6U"Q'32
!.k4J!!!%V!.k3d!!WH+#nn=',g%Eb-(uUg,Tmm4"p+K!"9J`6%MACIJeEYJo+D0;&.AgIPlQC9`W,u>
^&W`bMZ="`!soV]+s\H\JgH!plQl][+;YIk!VcWt!X/o@&ZcUs'#"t]&.f6U"T/7O!.k4-!!!%s!.k3G
!!WH+#nn=',j-J*-%mQF,Tm1*%0ck.!!E?,$4[Z4&qUbI&d/aW$j[!A!.k3M!!!&S!.k3&!:9aj!<WWA
*?lc"-%[Gg,m>P:(C^QLp](Eu"UY_OaV'1<Tb7J>&.AgIk5^)6JcPBB!!/2^JcN:\"p"f4'-/8BdNsJk
R3`"^+;YIk!VcWt!X/o@&cNDp&qUb^&d/aW$j[!,!.k3b!!!&p!.k3&!71]M!<WWA*?lc?-%[GJ,m>P:
(C^QLp](Eu"UY_Ojq<7YKG+:r!Xo>;K`H])ec5[NXoO%RRfEWn!soV]+scV'JgH!pq]uCk+;YIk!VcWt
!X/o@&Y'Jc'$_*m&.f6U"M+Sb!20Am!TO03!.k44!!WH+#nn=',c)f=-,q57,Tmm4"p+K!"9J`6%M@)$
JeFIa":u+Q#R'SrJcLB&lMpncR/hg=ZiL%)"p"f4'-/8BN?s0&hB`=N+;YIk!VcWt!X/o@&\/O+'!W&P
&.f6U"P3X*!/(=Q!<@]OJcNjl"p"f4'-/8B_Bjd[W?h]n+;YIk!VcWt!X/o@&ag9`&qUbn&d/aW$jZuq
!.k3r!!!&.!.k37!!WH+#nn=',kiU:-%[H7,m>P:(C^QLp](Eu"UY_OU_87l`Y&Cc&.AgI_>o/fR/d3f
lMuM:JcOU,"p"f4'-/8BXX/QF^*Nq.+;YIk!W<#r!!E?,$4[Z,&qUbQ&d/aW$j[!9!.k3U!!!&K!.k3&
!;-<r!<WWA*?lbo-%[Go,m>P:(C^QLp](Eu"UY_O_%M>4W=f=F&.AgIhZ/6.JcPZJ!!.oVJcNRd"p"f4
'-/8BasDWcTd9jf+;YIk!VcWt!X/o@&bZih&qUbf&d/aW$j[!$!.k3j!!!&6!.k3/!!iT-#nn=',UFag
-%[H/,m>P:(C^QLp](Eu"UY_OX:g*t^(LP[&.AgIquD<KJcOX-!!/qsJcMPG"p"f4'-/8Bk9Y^+KI$XE
+9NDh"p+K!"9J`6%M=p<JeHWI":u+Q#R%F5JcMbM!!1gSJcLB&m/R=k!soV]+s`^*JgJ\g"XG3,%0ck.
!!E?,$4[Zi&qUai&d/aW$j["!!.k3&!:p0j!KdA6!4W"5!<WWA*?lcW-%[G2,m>P:(C^QLp](Eu"UY_O
rXseqJeIA^":u+Q#R$[uJcNLb!!2ipJcLB&ci=7N!soV]+sa`GJgIZJ"XG3,%0ck.!!E?,$4[[1&qUaL
')rLE$jZui!.k4%!!!&&!.k3?!!WH+#nn=',k!%2-%[H?,m>P:(C^QLp](Eu"UY_OS.^Ddc4U6k&.AgI
\c@<^T`>&nirFZ2JcOm4"p"f4'-/8BV'U^>`[(d6+;YIk!VcWt!X/o@&^_5C&t'@8&.f6U"Rc>B!.k4:
!!!%f!.k3X!;um%!<WWA*?lbg-%[H",m>P:(C^QLp](Eu"UY_O\IsK,Yn@0N&.AgIf)UC&KE)#R!.k3&
!6>-E!<WWA*?lcG-%[GB,m>P:(C^QLp](Eu"UY_OmLk*aJeIqn":u+Q#R$+eJcO'r!!0M.JcLu7"p"f4
'-/8BpEbD;JgL"7"XG3,%0ck.!!E?,$4[ZD&qUb9&d/aW$j[!Q!.k3=!!!&c!.k3&!8RVZ!<WWA*?lc2
-%[GW,m>P:(C^QLr;c`q"9J`6%M=X4JeHoQ":u+Q#R%.-JcN%U!!1OKJcLB&o`,0s!soV]+s`F"JgJto
"XG3,%0ck.!!E?,$4[Za&qUaq&d/aW$j[!n!.k3&!;c`r!Jpf.!5JR=!<WWA*?lcO-%[G:,m>P:(C^QL
p](Eu"UY_Op(DriJeIYf":u+Q#R$CmJcNdj!!0e6JcL]/#QY#6'-/8B,pe-hJgK_/"XG3,%0ck.!!E?,
$4[ZL&qUb1&d/aW$j["6!.k3&!8[\U!N#jK!2BMu!<WWA*?lcl-%[Fr,lo86!uDCN!VcWt!X/o@&X3o[
'%RZu&.f6U"L8#Z!3#qu!S[U+!.k4<!!WH+#nn=',b665--de?,Tmm4"p+K!"9J`6%M?eqJeFai":u+Q
#R';jJcLB&o)JakOT9t5\,Z^6!soV]+sbS_JgHg2"XG3,%0ck.!!E?,$4[[I&qUaJ''g/5&.f6U"J#OE
!58F5!VcYH!.k3t!!WH+#nn=',e>:R-*\a",Tmm4"p+K!"9J`6%M@h9JeE_Lrt#5?#R#h]JcO@%!!05&
JcM8?"p"f4'-/8Bmj3Q3JgL:?"XG3,%0ck.!!E?,$4[Z<&qUbA&d/aW$j[!I!.k3E!!!&[!.k3&!9F1b
!<WWA*?lc*-%[G_,m>P:(C^QLp](Eu"UY_Od1V$DR1]W6&.AgImf7q>JcP*:!!/JfJcN.Xr;[$&!soV]
+s`-oJgK8""XG3,%0ck.!!E?,$4[ZY&qUb$&d/aW$j[!f!.k3(!!**#JcLB&a8cDF!soV]+sb#OJgIBB
"XG3,%0ck.!!E?,$4[[9&qUaJ')N:E&.f6U"H<D5!6tQE!O_u[!0[Be!<WWA*?ld'-%[Fp-1`Dd,Tmm4
"p+K!"9J`6%M>KLJeH'9":u+Q#R&!EJcM2=!!2BcJcLB&h#IW[!soV]+sa9:JgJ,W"XG3,%0ck3!;lg"
!X/o@&W@?S'&F6(&.f6U"KDHR!3lM(!Rh%#!.k4D!!WH+#nn=',aB[--.X@G,Tmm4"p+K!"9J`6%M?Mi
JeG$q":u+Q#R'#bJcLB&qZ$TsM#`,-^]4Q>!soV]+sb;WJgI*:"XG3,%0ck.!!E?,$4[[A&qUaJ'(Z_=
&.f6U"I/t=!6,!=!PSPc!/gg_!<WWA*?laT-%[Fp-0li\,Tmm4"p+K!"9J`6%M>cTJeGd1":u+Q#R(&*
JcLB&h>dNVV>u2JUAtK!!soV]+sc=tJgH'r!@/ci(C^QLp](Eu"UY_OPS/Q\ee/)s&.AgIZ2fIVW;lo!
gAlg*JcP0<"p"f4'-/8BSL&k6c6WW>+;YIk!VcWt!X/o@&]kZ;&top@&.f6U"Qoc:!.k4B!!!%^!.k3\
!!WH+#nn=',gmuj-(-%_,Tmm4"p+K!"9J`6%MA[QJeEYJlOj=3&.AgISH+6A^&S-6p],mGJcO-t"p"f4
'-/8B\g;qSYpBQ!+;YIk!VcWt!X/o@&`s^X&qgnt&-<7G"GHi-!7h,M!NlES!1Nrm!<WWA*?lct-%[Fp
-2Stl,Tmm4"p+K!"9J`6%M>3DJeH?A":u+Q#R%^=JcMJE!!2*[JcLB&jT#Jc!soV]+sa!2JgJD_"XG3,
%0ck.!!E?,$4[Zq&qUaa&d/aW$j[")!.k3&!:'Ub!LWq>!42b)!!WH+#nn=',`O+%-/KpO,Tmm4"p+K!
"9J`6%M?5aJeG=$":u+Q#R&`ZJcLH(!<E1P!.k3l!!WH+#nn=',f1jZ-)i0o,Tmm4"p+K!"9J`6%MA+A
JeEYJq[s#C&.AgIN<"P1c2[hF[K(mZP5kdf!soV]+scn/JgH!po-FPc+;YIk!VcWt!X/o@&Yp%k'#kOe
&.f6U"Mt.j!1<fe!UB`;!.k4,!!WH+#nn=',crAE-,(Z/,Tmm4"p+Z&qu?j$"UY_ON"U^Th@]r&&.AgI
WW7VNYlFb)df=t"JcPHD"p"f4'-/8BPpM#.eg1JF+;YIk!VcWt!X/o@&]#*3&ucKH&.f6U"Q'32!.k4J
!!!%V!.k3d!!WH+#nn=',g%Eb-(uUg,Tmm4"p+K!"9J`6%MACIJeEYJo+D0;&.AgIPlQC9`W,u>^&W`b
MZ="`!soV]+s\H\JgH!plQl][+;YIk!VcWt!X/o@&ZcUs'#"t]&.f6U"T/7O!.k4-!!!%s!.k3G!!WH+
#nn=',j-J*-%mQF,Tm1*%0ck.!!E?,$4[Z4&qUbI&d/aW$j[!A!.k3M!!!&S!.k3&!:9aj!<WWA*?lc"
-%[Gg,m>P:(C^QLp](Eu"UY_OaV'1<Tb7J>&.AgIk5^)6JcPBB!!/2^JcN:\"p"f4'-/8BdNsJkR3`"^
+;YIk!VcWt!X/o@&cNDp&qUb^&d/aW$j[!,!.k3b!!!&p!.k3&!71]M!<WWA*?lc?-%[GJ,m>P:(C^QL
p](Eu"UY_Ojq<7YKG+:r!Xo>;K`H])ec5[NXoO%RRfEWn!soV]+scV'JgH!pq]uCk+;YIk!VcWt!X/o@
&Y'Jc'$_*m&.f6U"M+Sb!20Am!TO03!.k44!!WH+#nn=',c)f=-,q57,Tmm4"p+K!"9J`6%M@)$JeFIa
":u+Q#R'SrJcLB&lMpncR/hg=ZiL%)"p"f4'-/8BN?s0&hB`=N+;YIk!VcWt!X/o@&\/O+'!W&P&.f6U
"P3X*!/(=Q!<@]OJcNjl"p"f4',r&>_Bjd[W[.ip,Tmp4"p+K!"9J`5%1hk>JeEYJr"Au?!Xo;:o`+sm
RK.p>cN*tG[K(mZP5kae":>e]+SI%3,D%03,6]23((CBIp](F!"UY\LU_/1j`Xr=a%LWIApAb9r!!*,I
!.k3<!!<6%!!;ThJcLB&h#IW[!XK>R*?M=)Jfh`L"s+g)'FFpCr;ccr"p"`-#Rh1RN=^[Qh[fr%%graK
!qlWo!Oi&\!3cG'!n74%!.k4C!!E?,$P=,<(4m=P('G9\"p=u%!!E?+"UPOP$\Abc$O$qF"p4r.p&G0q
!!!&g!.k3&!;ZZt!<E0$N<"P1^An?:"9o1R$\AbZ$Ng_?!s/)q!<WJs"bHo0"nMm#"pG)1!VQKq!<<*#
U]>uH_>jQ:_>o/fPlLdcp&G0q!WrQ("G-c."R?0n"Tnl.!V?Bl!iuES!PSR;"Tec,!W2ro!!30$!/pu2
!o="Y!<3)!!.k3R!!!)m!94*3!J1=P!V69k!KmG7!7UuK!O)QU!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&
!.k3&!.k3&!.k3&!.k3X!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k3&!.k48!.Y~>

%%EndBinary
grestore
np
148.82 591.33 mo
361.42 591.33 li
361.42 506.291 li
148.82 506.291 li
cp
.62768 .28513 0 0 cmyk
ef
148.82 591.33 mo
361.42 591.33 li
361.42 506.291 li
148.82 506.291 li
cp
1 /0 /CSD get_res sepcs
.216 sep
@
0 0 0 0 cmyk
%ADOBeginSubsetFont: LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H 2 GetGlyphDirectory
8273 <001C60D8A8C9B5EE310D991F82D8FC606D8F35C5B69427E6274A939C88
D01B05A52977427C91BD6A5BEBE2445B8801FBB3FCD81F655E2E5857D5DA5143
DE9CFD2A0E26F3B18C58D69C8B3F74C372A08664AB91409804538EC27395A273
1BDA4BF0FDB7623D4A5DFAC59413573DE1C8E4F7FBA66E7B685D4749EDC6C763
219CC1B695B7B892CBE8D997B68D977A9E3305495D166899FDDBE133B6D8B8C3
CA7349493EF83B63FB2CF6034C28F457801C9B80B4C1A831021C19DB280A05D0
11FD4FC019EC4252ED6CF1FE4B012F36D93897490B17F11146664896938A65A2
D07E114950CB45F30C44FCD1F98B684D97E8BE4CDEBFDC5A1C6EB02FE63DC59A
8317A98320E8EF0648D06323935482296C485DA44754BBE4409280F89A675105
B6164E773F74D78DDB7D41B37F2780052AD651E9F0E7AC6647834E20A322BB80
DD7D6213D361C5AC329E343F0ECEC3DD659FABC8FC19461E5D1E5EA144A9C90C
9CFF73B00B3749099CFE747426547BB3DA005431CAE908DEB8DBB03B269BC49A
382560F84696092A5485685951257773B8638542A25F1C> |
3515 <001C60D8A8C9B5EE310250288C1C6F6A69B2731737A9B23946AEC5233A
801EB2C5909A5919B48208B8D8388D1B961EA304687C305C7AB916EE17125871
C6891DD1E5391693BB9CA5D6D7D748962E76572C4F9C1871C498D4A3D9ED551A
49F74AF4515410DB4B324756E4232CCA02813D944CA0B9809B5F7E53C09B20FA
E7C12C78E095E2550538AC3BB15B200CEE219FBAB31D293B1F9493B8067FCA1C
EBD8BE885AE1174E8801FF69A40FAD7F4CE306AC1C75A05FF1A134E423720DD5
B14E8BDF3A0E13C60AF519485877754B98A249D0F0A4B8112AC28A2D97A06FF0
F96ED4C980C7A49BA4D70DE25DA6862C04C4E84A8AF71747408805559BE683A4
163E2D8E83585A53D2078BFE667C6D0C88B0DC6388775478AC771780685EAE8D
03> |
!
end
end end
%ADOEndSubsetFont
/LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [14.25 0 0 -14.25 0 0 ]msf
209.33 553.97 mo
( Q\015\273)
[14.275 0 ]xsh
237.38 553.97 mo
(\002\304)sh
%ADOBeginSubsetFont: NQPBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
systemdict begin
LCCJYC+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/d <1C60D8A8C9B78E05EAA3CECCCC7ABA6A35E55F211820F669BFFF2D107F3F
003F84456D947B5557966A2009812B81B51372EB70EB729C8C82B63A473DB516
1C83385AAD04B71C9D388B2F86E7C2E91E06E59E76C532F8A600B530589A218B
CA1E889366120C885033631C7850C65A7F9274D24F9BF6FA89E174B53B0E1A2C
F6D783F32D4C0BE4ACD3EEAF66A8BEC8DB7AC7ADBF3C9CDF5485D002662D310A
CCD320AD0234A2F2251E7C0B1667BFFC7E10EE40C7CB623518E3E168137CE699
E133B767C86E16CACCA64A58BD9D7F6E66BED6D6FE5D80E0381141549FFB2FBF
94ECD2D262EB097909F9092B71E3573FC9B4FD273505C685B327AE9095A2A155
45986A397AE2796BDB3888D16AF3DD82BF32621BC8C1393814540227FC926F77
872F2FAF5DD33717EB461ACFE3EE5C279294EBB5AADC09C8B10C3F2CB25CCD97
C6> |-
/m <1C60D8A8C9B6D24F7D3842850F4949AEB6B9100F2B78F4C8889450CED823
786FEB32A1B63E88AD56EE02413123CB64791A93EF92133FE4595DA2691E3035
F9F72C6031AE554C5E100D6D83A5170AEAC660F3CD2D2E423C32E393EEDCE69B
38CE6373F6B6777FFB71A30474298882FF21A6474EA00B23874CB701D4949FDA
B683EF52B401CF01FBFB5320858391C36D1B0A5131B6AD88B31FBA5AF7369B53
8683192205F94F973772FC0D1A80750F5CA55E65F4A8760D9FFB5A3E462EB76A
F894987A3AB123C31C6F61A2DE381C11A73194BB9FA663DEB4E0E047953FDCCB
40254C512459EA81EABD29705BEDA8917220B4CD736962EC932D0F91B2A5DC80
8623631D3854D7B6297589945BF94293721596CC4C62C71F5A8040654672D59A
8C73FC39F2C6919502A1FD8EB49A6BB72701DD42520B2F6CD223AC11A22A5CED
8614ABBE01C624D0AED39BB3AE4E8B513F61C37C6BA440280E139545B39C87A0
6867746DDC81F39BACA8E048A7276011988ACE081223D841AEA6DE2418F28BD5
9A30A454BE8DAE3786DDCC7D1BEEFB13E445F279EE7EA8CB61C194C9B25497E6
925AF3BEE4F64F897F4A57BD4C4A1E06EBC8223C35049061> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LCCJYC+Calibri /Encoding get
dup 100 /d put
dup 109 /m put
pop
%ADOEndSubsetFont
/LCCJYC+Calibri*1 
[67{/.notdef}rp /C 18{/.notdef}rp /V 13{/.notdef}rp /d /e 3{/.notdef}rp 
/i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r 
/.notdef /t 2{/.notdef}rp /w 136{/.notdef}rp]
LCCJYC+Calibri nf
LCCJYC+Calibri*1 [14.25 0 0 -14.25 0 0 ]msf
251.4 553.97 mo
(model)
[11.2432 7.50964 7.48117 6.75452 0 ]xsh
/LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [14.25 0 0 -14.25 0 0 ]msf
287.52 553.97 mo
(\002\305)sh
478.5 687.75 mo
66 687.75 li
66 640.5 li
478.5 640.5 li
478.5 687.75 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 841.5 ]ct
[414 0 0 48.75 65.25 153 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 552 
/H 65 
/M[552 0 0 -65 0 65 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 552 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 552 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 552 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 552 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&b5d+o
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcNsoJcLB&
JcLB&JcLB&JcLB&JcLB&_>qCQirPeQJcLB&Q2pmbn,U$"rW14CJcLB&JcLB&JcLB&JcLB&JcLB&JcNC_
j8nfQ!!MrsqZ?g%c33S<rrhopj8o,XJcNsoJcNairW2Kgp]:Brp&G-p!<_cl!!W?&d/i\;!WrN*p&P*o
p]9g`rrMWiJcLB&K`M)QqZ6]sp&P3p!!2Kfc3!G7!W`<%p&P3p!!2lrM?&5.JcOF'p]@f&ec>IH[K(mZ
JcOL)m/d"a!!N*"!!W0$rs&<'!!`E-pBLX'o*PC'b6n@[$4?A2!XK&<p]g^&rs&<'rs&9%!!W3$rri-!
r;lEhOoU(6XoSJ&p&Opi!!<&u!W`<(q#UO"qZ6]tpB1I"o`G3t#4huu#0I)O"pY;9o*#1"":"W'rW<0(
"8E#p!<<<"!WiH+!W2rt!rE#l!<*#5!.k3&!;$9f!<<,t!<N6$!VcZj!quZr!<</p!!!&j!!<6%!!1gS
n,NFhk5YVc!<<*$p]1*kq#CHs!<E#urrDosg]2p+JcNjlq?"M6JcGcNqZ;TSb5d+ooDnC^qZ?d#quZp&
r<3-)r<<3*rWiE,rs8Q0rX/N1"UYSG$k3[B%f[(4&-<FV'(Ze:'`8`o('>9d',:'P!YQ.Yoah*6p^[63
!"/Q1rsJ]2!X]2=rW`?,!!`?)rs&K+!X&W0qucs%qZ?<hT`BZEa8l2?p]16nrrW0"!W`B*quQj%r;lcu
!<WK%!s&N/r<39-"U,,."U5)4"pYD<#5\T)#PA?*#mgkC$1nQ+#mh$b$Ng_C#n-D5!so5?$2"Q*#mU\1
"p5,8"pFc+!<`W)"T\f1qu[!("9SH'r;cm%quQp%!s/B$rrW-"p]1<pblE=qO9#4[rrE$!"98H'!!)rt
r;uir"9JQ'!<N0"!!2ut!!2]lq#UKqp&Y*l!!2]l!s&E&!S7>8!!NB'!<<-#pAt9op]:*hrrMrr!!3'!
"9AK'!!2rsr;uir!W`<%rW3$!r;l<dJcLB&irK#ZU]>uHli?tcRfJ$?e,](@r<!!%r<!$'rWN6*rWNQ3
#6tG;#RC_CrX/W4":>SH%1W1E!"\u=!YH%Xr"B&Fq%`rGp_X&M)&i5e"<&0t)]\Gi!ur=%*mYr-*qC<Q
)]Tgr)Yt?L)>P*L(\eaI'bhA\'E8^B&H<:=%fHk9$O@.J$4."E#RL_7#6Y57"U521"98W("9/N%!qZNR
!.k3L!<3)q!;up%!WW3$!sAK'!!W?&r<*0'"9nc,"9\o4"U=l.!sAf5#l=f,#7:>7":5A?#RUJ;!XT2B
q$Zs+!=]G1%0R.L$OmR8%KR"Lg^s)hrX\Q0"UtqL$k*X?%06hGp^Hp*#7:bF$47(G$Mar-#Q"]7#R1J:
"U528"pG/7":"i-!!W9'rW*!&r;m-)!s&B%!WW<$!Vl`q!K[;5!:^'f!<iH(!<<-$quH]tr;Zfuqu?]t
rW!$$!!!&s!;cfs!<*#s!!!&a!!!&j!!!&n!2]_r!Ug!i!<<0"!!NB(!!!$"r;clu!!)lsq#CBqrW!*&
!!!$"!W2rs!rN$&!<E0$!<<-!!O;^K!.k4J!;utX!.k4-!<*%u!.k46!;6Hl!riE%"9&E7"pP58"pYA;
#RC_D$4I:M$N:M5%KI%<&H<CC'E8dE(A\mF)$Cir)]Kdp*<I9(*r6r\+<M^Kq&o;Q!?`WY,6&h/,6/nY
+p&u3+S?oW+Sm2]+X$S&ruV(Y"WJF#)]BXo)$1]o)>k<O(]>*S'bqDs'+trjrXf&>'b1]_%1E[Q$O[:K
#mgkC"pYA;"U,,0"98W(!rrK%!qlZ^!.k3_!<3)s!<*!&!Wi?&!sAK'rW3!$!<WK(!t#/8"U5,8"pG,6
#lOr-#Q"c.$4.%@#mh%=$i184%1E+D":bhJ%1W4F!Y5bOq[`f=&.nRHob%37ne(m5eIhKe!"e]5!=o\5
&bce<&J,H_q[ic<r!il>%LidS%fHh;$OutAr<ii;$4.(I#RUn;#Qb5:#Q=o0#R:P:qZR91"9S`0"9J]/
!<N9&"oSK-!s&B%!WiB'q>gNrRK/*CrW3$!!s&B&!W<#t!r`0*!WW3$!!*'"!Vufp!=]#/!<E0$!!!$"
!<E0$p&G'nq#CBqqZ$Tsq>^Krec;<B!!2Wj!<E9!!!!&u!;HNo!WE'(!<<-#!<<*$rW2os!!2ut!!3#u
!W`9$rW;ut#6=f*!<<*#!PJJb!87GP!iuBR!1X&h!pK]:!5eg2!W<'""TAK7"U"r4"U,)8"pbJ@#mq"I
$iLP6%LEXW&.oQh'GM8srY>JMrYPeV)&aA2)@.9$*$$%>*??4#*s!K+q&oSY![&U1r?;4bqBPqal6G[A
gElD:m3M!Br?V4aruq@c![Ag1q]YeY!?iTa+9*D]*=*T()]BV4)&aCj)#Y3Q'GM2n')iFB%i,Zc%LigU
$4@4K$4-tD"pYA;"U5/6"TAN'"T8Ds!NQ3e!<3)s!!WH)!WW3$"9&?'"T\W/"9\c/"Tnl3r<3<."U5/:
rWW]7#7(SA$4.(H$4?b?r<ro?$OmOT$k!OB%L*@Q&.f<_&GZk7&HN@Pr"/o?q@WZ;l4NV#r=],AbS'pe
mh4pur=Jf;rt,,@rt"u=!"\r;#8%LX%M00^&,m%A%1WaS%fHk7%/pV;$jd4I$N(/0#Q=o9#6k;7"U##5
"p>#1"oST(!WE-*!s8Q(!WiB'quH`tf)WtoR/dEl!<<-$!!3#u"9JW)!!3'!!!3'!q>gKq#QOi*!<<-$
!!2fo!!3#u!<N;s!!!&[!;urN!<3)u!71`G!SIJO!TF(Z!U9Xe!<<-$rW!'%!!*'"rW2rtrW*0&!!*'"
!W<#u!r`0)!<E0$!!!$#`W1Sjli@%eR/hg=P5tUanc47AdfB.DrW3'&rW<]8"9o#5"pY><#RLhH$OmLR
rXK/D&.fHe',22[('59h)#Y<W)B0Y8*??1BrZ;.`+oEJ]+Tii0,9m.2rZhCfo-=#UTd@T&pE]AUrZqFe
"X,$5,9S-.+o<An+!;XI*ZZ7@*?6";)AsG2)?(KP(((cj'GD)k&.f?_%fQnH$O[:K#m^hB#6k>9"9e]+
!!N6%p]7Z#VZ?_tqu?m$!<N6%"9&?9"T\`/!X&T-"9o#5#6b;:#R1J<$2t25$47(H%/pY6$kNjU%1N^R
%LimX%hB3_%hK?N&,m1?&-!7A&H3:@&G$M1')rNf&sj72&GZt4&cWIB&H*1E&.fEc%hARNq[WiA&.T6^
%K-b@%1<RR%1<XE%/pV<$4.(H#RUJ9%0m(A#R1G:"U5,7"p5&."TJN%!X8`-!!33&!W2rt!T!g.!:p0o
!<E0$!!3#u!s/H&!WE'!!Vl`q!WN0"!V??l!T3tW!UKgd!Vl_I!9sRa!UKgc!UKdd!Vucs!<W6#!!2rs
"9AK'!!3'!"9AK(!<MrqrrN*!rrW0""9AK'!!*$"KE0$mrrTn7JcLB&eH#UNYQ1a)q#UHr!!N9'$NpS:
"U52<#RLhH$iUS<%Ls!\&cNFG'c%Q%rtt_Q"r\F"*$$%@r?(nZ"sG-4+<r'RrZhCfp`oS[[O$MOoHj;Y
p`ob`"sY?9+X/$OrZV4_#9b33+!)ID*W?u^)AsG2(`4(g()IZ!&eY`e%hB-Z%1<ON$4$nA#6k>9"9nc,
!!N9&q#Tj_b5esNrrN&u"T\W*!!*3$!Z;">"9J]."pP57#6b;;"pP;;#RLhE#mq%JrX9#@$OmRR%1WjP
%M'$\%M'-K%gEUX%M'-`&H3:@&GQk7')rNE&qUbq')rO?')3(<&-NRW&.fHQ&-!7?%h90_%hK6^%LrpW
$OdIR$iUP;$O[@L$iC8<#6kG<"U,#5"p>#3rWE6&"o\Q,!s&H)!<N-!rrM-[KE2#Q!rr?%!WE'$!Wi?&
pAk3or;Zs$!<<*#qu?j#!!!'$r;Zm"!!2QhrW2QirrLaPJcO4!rrMZjrW2*\!!2rs!!3'!"9AN'!!3'!
rW*$"!W2p!!WW3%!!!'!!<3(W!7q5N!j2NT!.k3s!<3,/!4i1,!WE-?"9S`0"9o#6#7(SB$4@1L%1WjZ
&/#Ti'c%Q%)#bBZ)B0Y:*?H7D+<UP)"X,$3+<i!.,Q8tc,Pi[T-%[H(-2Jn`,Q8qo,9n?T,9S*P+oEJ_
+9!8c*#fh8)AsA.rY?1^',(rh%hB-Z%1<RO#m^_?"pG26rW<-'rW;osnGnRL!!3#u"p"`+!!*0'&-<"9
"9J]."9o&6"p>/8"pb)4$4.%I$OdFQ$OmLPrXK&A%h9-^r=9&D&J#Ba&H3:@&Gm(;')rN`&qUb+')rO@
')E4>&-rj[&.fEa%M9<O%g*@R&.SUK&.K!W%1<RQ$O[@L$47(F#R:Y?#R1G;"U,)4"o\W)!WE-'!s&H)
!W<#u!M0;H!!NB(!!*'#rW!0)!!*'#!<<0!!!E<'!!*-!!!!&u!!!&q!!!&j!<*#m!<3)k!.k30!<3)q
!;uos!UTji!<N6$!W2p!!<<0!!!!&m!!!*"!!!'!!!!&<!3cJ'!n@:&!.k38!!!)i!6YA_!;ccu!WiN(
!u(kB"U52;$471L%1NdW&.oQh'G_J`(^_,u)B0Y9*ZcCG+oWSi+WqmP+X83W,l8hb,l]-C-%[Gp-2Stb
,QB%h,QAqe+TEVa+T<J^*?Q7?)AsD0(D[c$'G:uh%hB-Z%1<LL#R1M<"U"r1!sJT)qZ6<hRfEEhrW!'%
!<N6'rW3B,"9J]."9er6"o\]2#7(VC$4.+KrX9,A%1E[T%M''[&/"mP#S@OW&J,Nd&.n^Nr=],AYS)O#
WtPFDr=\u>rt,2Brt,2@rt55@!tYtS%K6hC$OdIP$k*LO$3:G=rWs8D"pbD;"9eu3"U"r/!<N<)!<N<'
r;ZfuT`F?X"9AN'!<N0""TeZ)!!*,u!!`N*!!*'#!!2ut"9AK&!<N0"!!2`mrrMiorrLmTJcLB&rW)s!
pAk3oli7"drVup!qZ$Wu!WE'!!W)j"!Wi?%!WE'!!QY8T!<3,@!.k3&!0@0\!qZJ`!;lj4!WiK,!sAf3
#6kG?$4@:P%Ls$^&el2u()@`()&XA5*??4D+<_jM+X%sN+X83W,lAnb,c2l>-'oqT,lAkn,U4NW+s8!O
+<VjN+<MXG*#on9)&X8.()@St&J,H`%L`^R$4$qC"pG,3!sJT)quNo"n,NFhrW!u?!WW<(!W`E*"Tnl2
"9o&9"pYD?$4@1K$OdFO%1E+E%1j'_%hB6a%hB3`&J,NO&cNFC&CM2C&qUb]')rOA')W=H&.oKc&J#?`
rXSu?rXT;F%1N^T%1EXQ%/^DE#6kD:#6b;9!sA`-!WiH)!WiE%!!!&Q!5JR@!<<-$!!!'#!<N0"!!3'!
#6=f*!!*'"!WE'#!<<3#!!!&m!<3)q!<3*!!.k3&!58I5!VcWp!V-6j!Vufr!WE'"!Wi&r!s/H&!WE'!
!QtJc!!!)3!.k3&!0$sY!qu\o!;lj@!WiK,!sAc3"pbMB$OmRV&.oQi()@]')&XA5*?H7D+!:h3+X%sP
+X86Xr?M4cPU1o-O!X]Lr?M=fs!%Xi+<VgNrZE1&*??+=)AsD0()@W!'+bZb%1N[P$4$k@"p>#1rW;uu
Y5nJ#!!3'!$3:2.!s/N)"9\f2rWNB0"pbM6#m^qI$k*LQ$P![G%gijY%hT<_&J,Nc&H*4>&c`KY&qUaJ
'&jQ(&H3=@&KD>n&J5Qb%hTBa%hK3[%LijU%1N^R$OR7K#R:V6"q1Y="9el1!<N<'!!33#!!!&S!6bEI
!<<-$!!!)r!!!'!!<3)u!!30$!qQEl!Vl]q!UKf<!.k3Z!<3)r!<3)o!!E<&!!*,r!!E<'!!33"!!E<&
!WW<$!!!$#!!/eo!!;3]JcLB&JcO:#!!9A)r;ccs*!-0E!s8Z0#6kG@$OmRU&/#Wk()Rl,)B0Y:+!:J)
"sG-4+X83Wr?M7d\KuhRJgJejr$;7d-6si]+WqmN+WqpN+!)FB)]9M1()@Ss&.]6[$OR1G#6kA8!sAZ,
r;l![d/XXW!!!$$!!<9(!<NE,"pOu1$O6qC$47.L$k3UQ%K6hD&.]9`%hB3`&J4mQrXo2BjV!.XJeFmm
!"f)ArXg%[&.oHa%hTBa&J,Ka%LrjU%1EUQ#mpqE"pk23#m:>5"9AQ+!<N;S!8%8W!<<-$!!!'$!W2ot
!VQKq!<<-$p](9pq>^KrgAlg*JcMtS!!2orrrM`l!!<&u"9AK'!!3#u!!3'!!Wi?&!WW3$Y5eP(fDpL'
JcLB&df9@L[fH@-rrO;F!sSr7#RUqK%M'*`'G_H$)&aG7*ZlLJ+<_jM+X86XrZh@eW[36CJgJVer$;7d
#:(N=+WqpO+T<H!*?6"9(`4#''+kcd%1<LM"pY;7!sAZ,r;l$\fDm,s!W`?("9S`/"pG28#RLbC$k!IO
$k3[W&.fEa&Io<_&J,NQ&cNCC&CqJG&qUah')rOB')iIL&.oKc%hB6_&.eaM#R_(M$k!CK#m^P:#lXu8
!sJf.!WrE(!<<*#]`8$5qu?p&!!!$#!!3'!!!3'!!W`9%p&P*nqZ$TsK)gK'JcPBBrrMus!!2ip!s&B%
!rN$#!<<-%qu?s&!!3-$!<</5!!3-#!egW+!.k3@!!!)a!8@MQ!?hLG"9Sc1#7(YE$k<g\',;9")B'P7
*?Q@G+Wr!Q,:"KYr?Tc:JgH!pOX9rO#9tH=,U4HT+oWSp+!)@?)&X8,'G:re%1<LMrW`B)rrW0#jT+BB
,QRlF!WW<(!<N?+"pG59#RLhF$OdIQ%1WgX&.]?`&J,Nc&J>!T!"d0`JeEYJRh>]4rXoAH&J,Kc&H*+H
&.f?]$OmOR$OI.L#R:P;"9el1"9JW*!Wg1="T\W(!W`<#!<N6%!Ug!g!W2ot!V6;C!.k3&!:Bge!W2rt
!Vl]q!W2p&!<E0$!!*'#q#CBq]E!N`JcLB&S,`NjkQ'ZDrW+#@"9Sc2"pt\H%M'-b'c%W()]]tA+!;^L
+X86X,Q/n+-%[Fp-&j5M,R5P=,U4HW+<_LC+<DOC)As>,'G:re%1<LK#6b23!Wr?%ci>*f!WrK)!s8]1
"pPA?$47.L%1<XV%hK6`%hK<a&/"mS!"eW4JeEYJJeHuS,S1S$&J5Qd&.oBa%hK6]%L`^R$OI.H#7(M<
"9eo0!WW9%!!1FH#6=f*!!33%!!3-#!Up*h!W;uu!M'4B!.k3X!!!&u!!!&n!!**#rW2rtrW2uu!!2Qh
h#IEVVZ;;KJcLB&b5go0rW*o="9Sf4#RUqL&/#Zm(`=85*ZlOK+<r*V,U<75\0Z_QJgH=$rZhXl,:"KW
+;Z1D+<DOC)AsA-'+k`a$OI"A"9S],!<LjR*<?-@!!<9*"U"u4"pbPB$OdIP%M''^&IoBb&.fHQ&c`L(
&qUaJ&qUbQ&fqSs&eP]e&J,Hb%hK6]%L`dT$jm:H#R(A6"9AQ)!n@;M!W)j!!<<-$r;cWnrrN&u!!/2^
JcLB&Z2ak*r;Zfun,NFhrVup"m/Z8K!!8_lJcLB&JcNOc)?Bj?"9Sf4$4I@S&JPut)B9b>+!;[N,:"KY
rZpJLJgH!pJgJhkrZi:),U4HT+WqjI*?,k3'bV&f$OR.D"9S`)!T!ed!WrK,!sJo8#RLeF$k<aU%M00^
%M99a&J5Wg&<@HU&qUan&e#<a&ePZe&.]?`%h0$J$OmFK#R1G:"9\`,!!*'#qZ,XV!!2ip!!2fo!!3#u
!!0\3JcLB&JcPTH!!3'!!!2ip!!3#u#QXo*!<<0$!<MWhJcLB&JcLB&kPtSai;aYp!<NB,"pbPF%hfZn
)&jP:+!DaM,:"N5,hF>o-%[Fp-.+%<,ShUM,9n?S+!)C?(_m\q%LWRI"Tnf,!Ta:h!<<0'!<`N/#R:\D
rX0#B%hK<`&.oHc&ciUVKG&kLJeFmm"qVC[&J,Ndr=9>H$k*IM#R1G9!sAZ+!VZT[!!**%qu?g"!!!&q
!!!'!!!!&(!.k3&!.k4G!!!'!!!!&s!!!&u!<3)s!!!%q!.k3&!.k3X!!!)_!#5M9!WrZ5$P*g`()\&4
+!;[L,:"KZ!$m1CJgH!pRjJ%Z'dFtK+<_jK*?,h2&eGHY"pG)1!<E2c!#5P9!X/c4#71\E%1NgX%h9-_
&.oNdY7cF"JeEYJmLg<I&eYcf&J#Hb%h8sU$j[+D"Tnl/!!!&n!:^$m!<<*$!!3'!rrN&u!s&B%!ModJ
!.k3&!;HNo!WE'!!W)is!r`0"!W2ot!MKLF!.k3&!1s6)!<NB-#RV(T'c7l1+!;[L,U4Q[pa(M<JgH!p
RjAao,U4QZ,9\0M*#TM+&.JpN!s/K(r;c?f&-;q:"9f#9$4I:P&.]9_&.tZMJeEYJJeIJa!tZ(W&H37K
&.K*Y$O[4E"U+u,!UKdh!<<-#!r)`q!R:[s!.k3&!5\^<!<<*#o`,'p!!!&M!.k3&!.k3'!!!)h!"f54
"9f&?&/5s#*ZuUL,9nHZVBpg?JgH!pjX'jN%3lu<*uu47&e56R!s/N!!;QU,!<E9*"pPA?$k!RW%hK<b
&eLQGJeEYJJeIMb%hK?d&.oE`&.T-W$3gY9!q$'g!W<!#!<<*#qZ$Tsa8gelJcLB&_Z0c>!!!&s!<*#u
!!!&g!!!)]!.k3&!.k3&!;-="!<NB0%1s?n*$6=IrZn$\JgH!pJgKP*s!7Rg#p:</(DI>d"p=tt!"/i/
"9o/@%1WmZ&.lkpJeEYJJeGX-!>#nC&I8mW%1EUL"U"qs!!*-%q#CBqo)O@BJcLB&NW9%[quH`tr;Ziu
!JCH)!.k3&!6YB>!!rZ-"UYeU)BL"FrZmaTJgH!pJgKS+$R?rA+<MR>&e"sH!V69u"9f&<$kEj\&/#Pj
&qUaJ&qUb-')rRC%Km1G#6P&!!!<6%!!2ut!W`9%m/V_<JcLB&MZ<_Xq#H!HJcLB&JcNpn#m(;<&JuK1
+XA>N-%[Fp-%[GM,mknC,9S'I'b1EN!VQL!!X&W4$k<dZ&FL0_&qUaJ&r7/(&/#Qc&.8RI"p4u!!!!&t
!!!%h!.k3&!.k4*!!!&s!!30$!W)kK!.k3&!.k3t!!iT-#S7gn+=&5F-%[Fp-%[GP,mYbA,9Rs@%0cn-
!!WK/#Rh.Q&Ea[X&qUaJ&rRA.&/#Qc%LNCB!qZHm!WE'!!L*S9!.k3&!8[\U!W)is!j)HS!.k3&!1s5q
!<ruK*?ZTm-%[Fp-%[Fr,lo89"X+cr#Qt2'!!WH,"q1tP&XX2_&qUaJ'%R[!&J5EX"p=c'qu?]tL]E#,
JcLB&gAh3SpAb0pZiG[XJcLB&U]:T#"qDFk,:)CtJgH!pJgH4!"XG32'FFpB!VcX!!X&]9%hTA:&qUaJ
&qUbM&d/^T$O$V)!!!'!!!!&7!.k3&!.k3&!.k3&!.k3&!:g*o!X9)L*[)er-%[Fp-%[Go,mGV<)\NGZ
!W<#r!!NE+#R_.SN=pgUJeEYJi"?2)&If'N!qlTo!jr#[!.k3&!42_.!<<-$df=t"JcLB&JcPNF#6=o6
&fVo;,a9U,-%[Fp-/BjP,U=KQ((LQNp&G6t"UGJI&\es1&qUaJ'!MuP&.]6Y"p<NYJcLB&JcLH(!<E0'
!!!$"!J^Z,!.k3&!6YB?!!rZ-#7M:c+!;gSOX5T*JgH!pj<Y*X,9n<N(_@#V!VZR"!<<9.#n%4R&A/X-
&qUaJ'"AP\&.oKb%L`UH!Whup#6=i*!<<-#!U'N8!.k3&!/pmX!Vl]q!J1<'!.k3&!7h,M!qlU"!<`W:
',V]4,Q8t--%[Fp-%[GN,mknB,9\*I((U]S!qZI"!s8`6$k<j]&/#QE&qUaJ&qUaP')iIE%grdJ#6b,0
oDeso!<<0!!!30$!M0:C!.k3&!7LoJ!r;nK!.k3&!.k3r!"&`0"ptnV)BBnB+oWb)-%[Fp-%[GV,lf4i
,7,J5)\s(r#Qk,/o)K1$"9f&<%1WmY&.fHcmh13bJeEYJO:qO)$4dRT$OR.B!WiB&oDeso!!!&s!!30$
!Ls.A!.k3&!8[\Y!<<-#!NH-O!.k3&!1X#t!<NB0$P4!h)]g(D+oWb]-%[Fp-%[G),n2+F,9nBU*uu47
&e53P!WrH(n,Ngs"9f&;$k3^Y%hK;H&qUaJ&qUbV&ciOVr=KAH%LidO"pG,2!<N#sp](O"!W`9$!<<0!
!!!%e!.k3&!.k4<!!!&t!!NB'!!*'#rVup!V>u2JJcLB&Z2ak+n,O(%!<`T5$4dab)&jV>+X&'T,UE(0
JgH!pJgHg2&gS_I,U4ES*uu78'G(]["p4o-r;cEh&-2e6"9o#7#Rh.O%hK6_&J:]LJeEYJJeID_&.fHd
&.oE`&.T*V#m^_="9RoirrN*!!!<-"!!1+?JcLB&JcNRd!s&B%!V??l!UTje!pTc;!.k3&!.k4;!#5M8
!WrZ7$P*jb(`OG:+<_pR,U4Q[XX/QFJgH!plm;WV&gJYF+<_jK*#]S,&.JsQ"Tnf,p&Oac!W`<'rWN]9
#RUtJ%M0-]&J5QdTb;qiJeEYJp(A&N&eYcf&.]?a%h9$V#m^_<"p=u/kl:ed!!!&l!!!&D!.k3&!.k3n
!!!'!!!!&p!<*#\!!!)`!.k3&!.k3&!:Kn)!<E6)":#8A%M9?i)&jS;+<_jN,:"KZ,crAE-%[Fp-2&Ya
,S_OL,9n?S+!)C?(DRPo$jm7E!s/K(k5Z7u!!36'"U,)7#mgtK$P![Y&J#Eb&/!M,JeEYJJeH3="qVC[
&J,Ndr=9;H%L`[O#R:M9!s/K(irB)\!r`0"!VHEm!J:B(!.k3B!!!'!!!!&n!!`N)!!*-$!!3#uJcLB&
JcLB&g&M*So)S:\(]aX="9\o7$4RIW'G_N')]]tA+WqpQ,U<:6XsJZGJgH!prZi@+,:"KY+WqjJ*?,k3
'bV&f$OI%A!s/N)!T="s!<<3&"9\l4#71\E$k3XU%hK<`&.oHc&eYc0&qUaJ&qUbH&dJs\&eP]e&J=sP
!"Su9$jm=I"pP55"9JT*!!2$YrW*'%!!3#urrMio!!3'!!!.iTJcLB&W;lo!r;Zfuq>^Nt!W<!#!<<*#
nGqkT!!8PgJcLB&JcNIa*!$'A"9Si5#RUqL&/#Zm(`=84*ZuRK+<_sT,:!15js>U*JgH!peg:;@)'^CP
,9e6R+WhaE)]9J.'+k]`$jd+B"Tni*!SRM^!WrK,"U"u4"pbJ@$O$qJ%1Wm[rXT5F&J,Nd&eYb>&qUaJ
&ulQd&/#Tf&.fEc%hTBa%h/mS$k*IL#7(P<!s8].!!*'#q#K@R$3:,,!<E0#!<E0$rVup!q#CBqr;Zfu
^AricJcLB&r;ZfurW)s!q#CEs!VcWt!WW3$!UTl=!.k3&!.k49!!!)P!<*!=!WiH,"pYD@$4[U[',DB&
)]Tk>+<VgM+sS?Y,Q/nO-%[Fp-%[H&-2o/3,9nHY+WqpN+!2OE)]9J.'b_,g%1<IJ#6k84!WiB'eGp-]
!!*-%!W`B*"p>&5#RC_E%L`dS%Ls!\%hT<a&J,KcrXo2BPnJZ]JeGL)#7qL\&J5Qd&H31T&.]9]%1N^R
$4-tC#R1G8"U"l.!!;Qgj8]/\rW!B/!W`9%!!**#!!*'"!r)cq!W;uu!Pnbf!.k3.!!!&u!!30$!;ZZq
!W<#u!W<#u!WE'!!RLfH!mCXr!.k3&!/^dU!<`H*"9ScG"pYD@$OmUX&el)u)&aG7*ZlIH+WqsR,:"KY
r?S*`JgH!p\g@;#+<r*V,U4HT+X%sN*ZZ4>)Aj5)'G:re$k!@J#6k84!Wr?%nGqAF%06G/!WW<(!<WE.
"U,,0#Rh"I$k3[U%M'$\%hT?O&HWLU&cNCC&C(o?&qUaV&c`LB&dK!\&.fEb%hBNi%hK6]%LW^S$OR7I
#R1M;"U5,5!WiB(!Ta=A!!NB(!!33&rW!'%!!*'#r;Zp#!!!&r!!!&t!!!&<!.k3&!13`d!W2rt!VZQo
!r`3!!!WH)!!*'"!W2ot!KmG7!.k3&!6,!=!lb6>!<`H*"9Sc?"U>;>$4@:R&/#Zl()Ro-)]]tArZD@f
+<r$S,lT%e,c2l>-%[G`-2f(q,9nHZ,9\0Q+X$b+(*+A6)&X8,'G:rf%LidQ#R:P<!s8T+r;l*^h#Ic_
!!!'#!s/K+"U+f.('k-N#R^tI$k!IQ%M'*^%hB6_&J,NcrXo,B!"dQkJeEYJRh>]4rXoSN&J,Kc&.]9`
%hK9N%L!4L%1EUNrWj#="pG28!sA`.!W`?'!!!&8!!WH)!!3-$!W2ot!W2p!!<</o!!!&s!!!'!!.k3&
!.k4=!!!&t!<3)q!!!&s!"&`-!!*'#!!*'"!W)is!PSPc!.k3&!1Elf!pTd7!;upD!WiK,"9o&8#RUqK
%M'*`',;9"(`F;3*??1C+!;^M+<i$T,lT%d,iL&$-%[G9-2f+g,6fD=,9\0P+oWSm+!)CA)]9M1()@Ss
&Io<]%1<LL#R:M9!s8Z-!rW/V!8RVd!<<*#!W`B)!<`N-"pP58#6"l>$47.L$k3US%Ls![&.]?`&,m.@
&H3:?&c`Kp&qUaJ&ulQE&H3=A&K),k&J,H_&J#B`&.]6\$OmOR$Od=I#mUY?rWNB,"Te]1!WiH(!W`9$
!Oi%<!<<*#!!3-#!<<*#!!2fo!!2`m!!2rs!<<.R!.k3&!;ult!W)ls!VHEm!rN#u!WE'!!W<#t!<rT*
!!**#!OMh,!eUK)!.k3H!!!)Y!7LrG!@S!N"9S`/"U>5;$47.M%M'*`',22t(`=21*$$(A+<_jN+WqmN
,9nK4,Q&hM-%[Fp-*S]o,lJqm,U=TX+s8$PrZE+$*uu=?)B'G/()7Mr&J,H^%1<LL#R:P<"9S].!Wr9#
Y5eP'rW"&A!WW<(!W`E-!sSr5"UG;<#m^hD$O[@P%1<XU%hB3`#S.LZ%hB3`&J4mQrY#5BPS/Q\KG":s
')rUC&IK'\&J,Nb%hT<_&H3.J%1<RR$k*LN#mptE#Q=o<"U,#2"9\`,!s&H(!<<*#[K-"$$NU5.!<<*$
!!*'"!WE'!!WE)u!W;uu!qQBl!Vufr!Pe\e!.k4&!!!&r!<3)p!!<6&!!2lq"9AK'!!3#u!!3'!"p+c*
!!!$#hZ1e!!!9_3JcLB&JcPTHrrU^Nd/a(F/HPtV!s8Z1"pY><#mq%K%1`s\',2/s()Ro,)B0Y:*ZlLJ
+<VgN+<VgP,:"Q5,Q&hT-%[Fp-,Lu*,lJqm,U=TX+s8!Or?*.'*Zc=A)]9M1(D[c#&ePZc%LiaQ$47%D
"pG,3!sJT)quQcsV#UJrrW!<,!WW<(!W`E+"Tnu."V1hB#6tMA$OR7L$k3XS%1NgX%hK9a%hB6a%hB3`
&J,NP&cE=B&=X;a&sa11&H*7?&IB![&J,Nb%M93^'b:ic%hB-[$OmIP$k!IM#RLbB"pbA2"UbG8"9\`,
!WrH'!Wi9#!!0,#oDf0u!!**#!!3-%!W)j"!<<*#!Vl`q!V6<k!Vl]q!QP1l!.k48!<3)q!<3)o!!`N)
!<<*$!!3#u!!3#u"p"](!<<*#rW!0)!!!$"!<</L!6>-?!k\Mb!.k3)!!33%!1<ib!WE-1"9S`0"9eu7
#RCbE$OdIL%hB3`&ebuqrYPnY)&aG6*?H7Dr?)@h+Wr!Q,9nHZr$2(aXsJZGT-aC\q]c[u,U4NW+s8!O
+WqmN+<M[G*??+=)AsD0(D[`#'GD&i%LrpW$OR1G"pY;9"9S`/rW;rtW;u8b!!3'!'*/.9!!<9("T\`/
!sAf4"U,,8#Q>#3#RLhGrX8r<%1E[T%fQt=&H31G&J#Ba&.oKc&H!.=')rNs&qUaJ'(Q\8&H3=>&Io?`
&J5Qd%h90`%hB6`&H*(]$OdIP$k*LN$4@1I#R:P>"pP57"9Sf/"9AQ*!s&B'!W;uu!S%1_!!E<&!!*-"
!!!*"!!!&t!!**%pAb<s!!!$#nc8[jqZ-TqrrIlTJcNdjrrMlprrM`l!!2rs!!2rs"9AK'!!2or$3:/-
!WW3$!!*'#quFn?`W,u?^&W`bJcLr6!!;]kQ2pd_rW3E0!s8Z/"U529#RM.O$O[@P%Ls$]&eYln()@]'
)&aFm)[.6'*ZlLHrZD@f+WqmP+oW_d,l/b_,e>:R-+,&q,l8hd,lT"k+X8*Q+oNMk+WqjJ*ZZ7@)]BS3
rYPnV().Gr&J,H`$k<^U$OR4H#R:P;"pFo-!X&Q+q>m)dkl:\ar;[9-!WW6'!WiB'"9\l1#5n]-#6kA;
r<NuA$4@4M$k3XU$OmOT%hB-]&H31D&J5K`&J4pRrt,#=r=],Ajq<7YM%]h"r"Al=rt,/A":u.U%h\aN
";)1T%hJXL!t,MH$iUPL$Od=L$4-tD#6kG<"pG28"9Sc."9JK'"9SW*!<N-!!!1.@\,Zd8!!*'#!!!'%
q>^a$!!!$#!!*-!!!!&s!!*-%r;Zfuo`5!lrrMfnrrJ;`JcOR+rrMfnrrM]k!!2lq!!2ut!W`9%r;Zfu
r;[''!!**#!<<3#!!E<'!!*,h!/pmX!r)bI!.k3&!9jL`!h98G!;Z`q!WWB&""=?U"pG29#m^hE$k!LR
%M'']&/#Wj'bqK"(`4,/)&aG6*??1B+!2UKr?2(_"!Ag4+oW_d,l&\\,l]0B-($"S,l&\a,Q]28+U'#6
+<VgNq]H7g+!)ID*?,q9)&aCl(`X;,'bh;o&J,H_%LigR$OR4H#R1M<"U5)5!s8]*!r;r9!3cJ'!W<!$
!<N<'"9&?4!<E<)"9Si4"U,,7"pbD<r<WE0rsJc6rs\l9!"8i8rXK)B%hK6_&cE4E&J5Na&J5TR&cWF<
&c34@&?HLr''g21&Gm+9&cN=I&J5Qc&J#Ba&c<.G&.]<_%h9'Y$Om"DrX9JK$OR1I$4."D#6kA;"9o#6
"p>#3rWEN."Te`-!<<0%!W;uu!Up*4!42_+!WE'!!WE'$!Wi?&pAbBu!WW6%!!2Edo)Sdko)SdkU&]cF
o`5!mo)SajhuEfZ!!3#urrN&u!W`9%qu?]urW!*&!!*'#!T=$7!!!)u!.k3&!.k4F!<3+\!8%;H!WE-#
"TAK@"U##5"pYA=#RLhH$OmLR%M'']&.oQh'G^T_rYPt[)&aA2)]Kb;*?P2%!?`K^+T<Mf+<VmQ+X-h0
rZqLgq'5VZPU3dbpE]JXr?V@e"X,$5,9S--+oNMk+WqjK*Zc=B)]Te9"r\?t)&O2,rY?@d'GD)k&.]9]
%LigU$O[:J$4$h@"pG26"TAK'"T8Dt!O`!0!<3)t!!NB(!WW6'rW3*(!WE39"Tnl3"U,,7"pY>:#7(SA
#mptF$3CVD$iUPF%1<US$k!LR%Ls!Z&.T6_r"&c="V)%T&J,NQ&cN@9&c!(>&ASp:')rO>&c`R=&cE:?
&cWFB&cWC?&cE4N&J,Ha%hB-[%1WgT%LijTrX9,A$Od@K#m^hC#71;5%L31A"U"u4"9S`/!X&N)rW39+
!<<0&!<N-!rrM*ZJcPQG"T\W(!<<0!!!!*"!<*#q!!iT+!WW6$!!*,q!!!&t!!!'!!!30$!U]se!Ug$g
!UKf<!8[_U!Ug$e!Tj@_!<W6#!!2lq!!2utrW2uurrMus!s&B'!r`0(!<<-#!!*+W!6bHC!kA;_!.k3t
!<3,.!1X&a!W<'""TAK/"U"r4"U52:"pP>=#mq"I$iUV7%L<RV&.oNf',22[('59h)#Y<T)B'P7)u^lX
*r[5^+<gV)r?24b+=$k0ruq:brZptXod&cJW?q3_n0@oXr?D@e+X.%5+sS3Qr#tnZr?)%\rZ):a*#fh8
)AsG2)?(KP('PEe'GD)krX]eT%h9'Y%1<ON$4-tD"pYA;"U5)4"o\W("TAJt!Sd[u!2]br!W2p%!<E6'
!!*3$!WiN+!WE3)"Tni0#6"c/"pG2:"p+u5#Q=u5#m^eD#mq+?$iUP?%1<US%L`^T%K6hA%hB3_%hK?M
&,d(@%M/LMrt,)?rXeQ2pCdK;h\*7.rt+o;n.GX2r=T&@r=K&@%f?q9%gERU%M00^&,m%F%1WgT$k<^U
$P!(DrX/l:#n%%H$2k,6#6kA<"pG51"UYG:!s8]/"9\`+"o\Q-!s8Q(!W`?"!<3)J!.k4A!!WH)!!!$"
!W<#u!r`0%!<E0$q#LBp!WW3$nc/Xjf`;!PmK!%_rrJ5^rrN*!klC\`kPtS`p](<q!rW*!!W)j+!<<-#
!<E0$!!*'$!<Mur#QXo*!<N6$!Wr<#"p"`)!<<-$pAfdF`W6#?^AricJcOa0rrStrPlUOZr<!!%rW<T3
"9\o5"U,)8#6kG>$2t88$O[CP%1W:H!"]&?!"o2D!Yc=`r>,>K!Z;jorYYhW)B0Y8r#PeYr#Yq^+8?uS
+T`c/,Pr\b+n[)Y,kN=q,Q/n[,QAqa+p&u3+Sd2V+9<Q,r>u+_*??.!*<I0")u^`Y)&X>1)?(HQ(]>-L
(&o!J'E8^D&H<:@%fQnL$4@4K$4.%F#mLV>"pG/7"9eZ*!!N6%o`<8:JcP!7rrMus#6=i,!WW6'"8r<$
!WE34!X&Z/!sAf3"pG/7"U52;rWWB.$2t27#mptG$OI1=$iLJ7%1E+D":P\H%Lr=Grt#&>!Y,bQp^d<8
r=T&?q@W`=ob%-6Yn?pGoaq6;&.n[M!=o\9&buq=&.f?N&-3:Nr!il>%LW[R%fQn<$P!%Cr<if:$4.(I
#n$P8!!iK-%1!.@"U,#5"U,)7!s8`*"TJN$!X&T+!!!*"!Vufr!VcYH!42_2!<E0#!<<-$r;cj!rW!3)
!!!$"!<<*#q>gKq%0-A/!!*'#!<<*#!!*)r!!!&e!!!&O!;urC!9F4Z!S7;O!U]pf!VQL$!<<*#!!!$"
!<E0#rW2rtrrMrr!!3#urrW-!"9AK'!<E*"S,e?FrrW-!JcLB&^&\-6a8jB`N<&YQrrN$!!!N3%rWE]8
"pG28#6tG>#RC_C$4?b?"pteJ%1NdWrX\r=!YH(YrY,;GrtYDH!#PPM!Z;joq\]PU)B0V8)uCWX*$-1C
oH+)V+n-WK+Qt!1+S-]T*r-fZ*#fh8)Z(BR)AsFh)#G*K'`JaI&eblT&H<:?%fHhP$4@4M$47(G$4$nA
"pYA;"U,)7"9\o,"9/N%!qlZ)!.k4/!<*#q!<*!&!Wi?%!<`6$rW3!$!<WK(!sSr4"pG/7"TAQ+"9o,0
"p,#8#Q4o7#mpqE$47.I$4?Y<q[<K7$i1;7%L`^S!=fS8%K[.N&+pJ8%hK?8&*OVf%g!:Q%eUD5&,d":
%Km4M$OdOA%06hGq@*90#Rh"G$47(F$46S8!!iH,#RCV="9eu7"U=r0!<r]+!s/W/!r`<(!<EB&!X8`/
!<<*$!r`5t!<3)\!.k3N!<*!&!!!$#!!2utrW<'!!s/H&!Vufr!W2rt!=Su0!WW3$!<<-#!<<0"!!!&j
!!!&p!!*-%p]1<p\H(gn!!2Bc!!2cn!!2`m$NU5.!<<*#!!*'#!<*$!!;uro!!!&u!!!'!!!30$!WE*!
!rN$"!<E3#!WN0!!Jpf.!;uos!f6o/!7:fG!jr#[!6P<5!W3$!"T/?%"oSQ,"pP57#6"i1"pPA>#lP&2
$474?$NpeG$k3[D%fR";&H*1?')E7B'G^0Sk8<:u!ZDpoknjC:neM9A'GUEX!YQ+Xq%*N:q[N`<%1E[Q
r<rT3rWr]5#RL\>rW`E-rWW<+r<**(qucs%qZ??ig&Q^)ScJckq#L?o!!<-"!W`B*quQm&!WE,t"98W(
!s/Z0#5n]-"pG59rWNB,"pYG2"p,#8#P\Q+$4.%:$3CM@%.aki$ipeFkR@V'%1<X/%.Xc-$4.+<$3UY@
#RLh5#QP,,"p5,9"pFf,!!`E+!X8c3r<!*)"9SN)r;cm%quQp%!s/B$rrW0#qZ-TqrrIlTJcOs6r;clu
rW*'#!<N&tr;uls!W`9%p](9ppAk'k!Wi?%qZ-j#!<<*#!Vl]q!UBaS!!!&^!!!&Q!!30$!W)is!W2rp
!WN/s!Vucu!<<*#q#CNu!!*'#r;cctqZ$Zu!<E*"rrE$!VuY!@JcP<@r;r8bJcP!7rW8YkJcNIan,`@e
rri0#!!W6&rs&B)!!`E-qZd'+!"/T0rX/<+":>JF$k;A0!"\9)rt"?(r=&`6oF([+rsAT0rs8K+rW`E-
r!!*)qud!'q?-a#q?$*d_>o/fOT>@]pAk3orrN-$r;Zm"!sAB$!!W6#q#g[$q#^X##5SK*"pG/7p&tO$
"9o+o"p"r8k6M+o"pX>s!sf)8"S;iu":"]+!<r]&!s/W/!rE,u!<<<"!WiH+!W<#u!rN)m!<3)f!.k3&
!7q5L!WN/u!<N6%!Vl`m!r2ft!<</t!!!&q!!!&g!;$<a!WN/`!WN/`!V$0i!VcWp!W)is!WE'!!W)lp
!r2ir!<<,u!WN/t!KI/3!36+u!o*d-!6tTB!kJA`!.k4C!9jOX!riDt!rrMr"TJ\k"oef+#ODWp#6G,8
#3c<k#4hrt"nr*!"SMo^!S[U+!.k3l!<*#j!;Z`r!r2ft!<WGu!WWDq!Vllf"9AT-k5t\fjok8V!!W)u
!WrH(q>gNsq>p<jrW)ouL]GTuJcNUeq>pTrq#LNs!<Mloo)e@\q>^X"!!!$#li7(f!!23^o)eUc!W`9$
q>pTrq>os`JcLB&PlUX^o`0RDn,W:dRK.p>JcOC&b5pZ*rrL@F[K(mZJcMhOrrM9_oE"RbrrVBarrV?a
kQ(S_iW+Q1JcLB&iW/-BrrD6`rrD3_nc47AJcLB&[K,Ilk5bJ]k5q7UJcLB&JcLB&JcNsoJcLB&JcLB&
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&b5d+oJcLB&JcLB&
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcNsoJcLB&JcLB&eGt+
~>

%%EndBinary
grestore
np
70.866 662.19 mo
70.866 651.85 160.93 643.46 272.02 643.46 cv
383.12 643.46 473.18 651.85 473.18 662.19 cv
473.18 672.54 383.12 680.92 272.02 680.92 cv
160.93 680.92 70.866 672.54 70.866 662.19 cv
cp
.62768 .28513 0 0 cmyk
ef
70.866 662.19 mo
70.866 651.85 160.93 643.46 272.02 643.46 cv
383.12 643.46 473.18 651.85 473.18 662.19 cv
473.18 672.54 383.12 680.92 272.02 680.92 cv
160.93 680.92 70.866 672.54 70.866 662.19 cv
cp
1 /0 /CSD get_res sepcs
.216 sep
@
0 0 0 0 cmyk
%ADOBeginSubsetFont: NQPBAA+Calibri AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
systemdict begin
LCCJYC+Calibri dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/A <1C60D8A8C9B7F88C2B6CB105045FB5B2B32CEE3D567021E87FFA3A108F22
F0AD769D89AF310F9FA2A63D83B348F1CD4D9158D831C2637A040F2E3D2AD1E0
C1265C252DE42DC685024335218B88110082607887337A49D14691BEEC919D91
764E7A708708CD55D39F5C43F91BAAAD2C1BF631413626FEAC47C21B08151BEA
5901545C7204664D0C76E7A812FB56764BAC701D80F5CBA63A3746A10BE794CC
B8FEAE9714EDA1C180ECED7E77C8C4917875CE0D099349356F25861C18102A30
8F1467786491B4C86DDD6D90CF5B29B935592B1FC4BC1C> |-
/I <1C60D8A8C9B86ED904793239D5A87846341C6685DE5ABE7704D2C21702B1
9492F988F7BDB944EF3CF61808A6DB9D1F22BBD335BB859C853102ABDC306BF0
344F58C180F59706796F6A9C1DD4450E8611E916B0A530128C4C5E0E96FFF301
F980705D57CD45F3B705E62B3216F34902178F51AC490CA8AF3698463F806A35
B46CD69D> |-
/P <1C60D8A8C9B7B6440707B4051A5DBE562555C57029EE089BD9C0449CBA1C
DE15C4825E58F476AE98F4F477E10D3D9627118D612BA7F36DE667A502083FA2
B5A87FB2329B4599145D540EE26CB50F350F1C24FBA25930C404B0478F3C579C
4E768F279D098F515881442D0DB18015E7A9640759CC77EC73BBCCD8C1932872
FD5A8725311BE90CFB90EBC81A1F03816E32CEC0A4E1DB1A22099D4FCE02BD53
A243FE7B67435108D6337E9414F0B3B9D88A863DF0DD8EDB216F3428E1C8EDAD
F4A32D7B4C28D91BCF9108C9794A650A0922E44EBCE859C2D94676859E04DBB6
727B1AB10957F28903A4930A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LCCJYC+Calibri /Encoding get
dup 65 /A put
dup 73 /I put
dup 80 /P put
pop
%ADOEndSubsetFont
/LCCJYC+Calibri*1 
[65{/.notdef}rp /A /.notdef /C 5{/.notdef}rp /I 6{/.notdef}rp /P 
5{/.notdef}rp /V 13{/.notdef}rp /d /e 3{/.notdef}rp /i 2{/.notdef}rp 
/l /m /n /o 2{/.notdef}rp /r /.notdef /t 
2{/.notdef}rp /w 136{/.notdef}rp]
LCCJYC+Calibri nf
LCCJYC+Calibri*1 [9.775 0 0 -9.775 0 0 ]msf
260.63 666.12 mo
(API)
[5.99203 5.23938 0 ]xsh
%ADOBeginSubsetFont: LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H 1 GetGlyphDirectory
4722 <001C60D8A8C9B5EE310DF4479E8CCE34655876EEDBEC477294991D20B3
1B7B0DC0120DB59FCF27A018392223886704D2CFA66772253458C53B1B1529F5
F2FB0089F587D0B2943405AE8BF5AEE25D8A37B9D4FD1EC8B5129F40867CCD15
ACD1C1F0FEAEA499C7E4499F5AB7269140028366D314596E71840595C4AC09DA
B32602757ADA07FE994B5E75A9B149C3A8D844A6D3D702ED129E7C4565E73361
04C2D26E3893AF49F473CCA093C13CE0F3C062BDD0002676C905A79858FD72E5
7B317D5CE3086038E909E126A41CA4B4401980E371A8D88601A3A766819F1D5D
DF1496D51AB805B6692C03EEB6433345D67F7C71F94C2253D20274C41DEFA7C7
B5F5EBDCB6FB80ED410CE61CE04CA7F813F28C1AC22C> |
!
end
end end
%ADOEndSubsetFont
/LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [9.775 0 0 -9.775 0 0 ]msf
274.1 666.12 mo
(\022r)sh
1 lw
1 lc
1 lj
184.25 591.33 mo
184.25 639.18 li
.62768 .28513 0 0 cmyk
@
187.77 638.3 mo
184.25 645.34 li
180.73 638.3 li
187.77 638.3 li
cp
ef
176.25 623.66 mo
192.25 623.66 li
192.25 613.01 li
176.25 613.01 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.711696 .386694 .0746776 .00158694 cmyk
%ADOBeginSubsetFont: LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H 2 GetGlyphDirectory
7072 <001C60D8A8C9B5EE31020F8211AF203B409BE69AC0B68B446FD4EE9ED1
4721CF2A9A21B88FDA7D8E37AAC73F35FE4084653B0B95E319EB8703812C2A0C
108D9092AFC18B1940DD2ED6AF36C6F1B98EEE247BC4A963065CFE72FB103B46
B523DBD7E07735C163D7413F2644CC28C6F92F85D0B39EA0D65AF3B4E4B78F55
D6FC49CE4D92F27CEEAC3024668CF3462A4AA4E8573702C758E552BCBE8F0414
EB253C2B7733024541CAE5388922865026D9C7E8A9ACD0C992348DD3F8D4CBC6
0622E7F2161951BFF34079ED8A8E67A25A5F1E11988BE535306FD2CA77DD87D4
D01BE4CA3ECDB0FCD161FE2ECFD9293096DBD24EE4C0F004279A015A08EF5EA4
45F0121066CDD05C304BDE9236870555C977C75D4739DBB42868E680B64AA37B
AE2401958310E87EA4454855BF081799704840DF55FF247D5DC9A48274AB8C60
835B6E7E86EDB425F69F049E974A425D9839A7D556A7244FCF74B36520B3DEC0
C69225DD2EDA65064DE6D781BE0E52E6019E6CD07C93F97A3C40589A375F23EF
61599F097FDD1C00369B8831B391879B210A664175977AE6DF10243B958940CA
DC480B0DCF74760E5300BFB15AA118D97F29E6AFBA54EF39A4F382CE16DE5FC0
7DBA65943CF9E0383993316CFAEC6C9728F1341EE3C4CA8305EF8D7085C3EF7B
9983E5692DB195A932D80484D2890D19> |
6558 <001C60D8A8C9B5EE3102820CDF2059AE7E38A7DD18C49A35420DB1B091
122739BEE0A32333A53DA02BFB714548CF1E0E1DF60B241A30D0E145F324C703
AE6BA40AE7367E8F21EA0F895A1A694E0B1E2B95885487CB92CFDEC1E2ED11BD
F2A7DBB72F5444265C5E8CDEA08DFED3052C81B6BBB72AF4591784C70BE7200D
1AB7ED97BE9C64CF192F912D7354C4FC588801B4F164B79208B016F221435034
0368B5CEF714699166C38AC42E0CCA0FA1C090F3438CA38CFF62B62408B0FC66
1CED7047AA4C28E7CE51EF328B4A242D039B9E86CFF81B0EDB18BD659F822BAB
9AB06551093EE0FE1EFA44BE7E8A9488CA8FC87D41DC769F16898A16C300C034
E8999E3F32045143E4882EF8548B1BC02A3DF2D6FD591734B19E9905316166B0
88D1AE54C0DEDAFC3AE73A2E8B291D796FF1536C4768D97BC0D916F0190CF71C
0C> |
!
end
end end
%ADOEndSubsetFont
/LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [8.25 0 0 -8.25 0 0 ]msf
176.48 621.58 mo
(\033\240\031\236)
[8.27505 0 ]xsh
334.49 600.89 mo
334.49 643.46 li
.62768 .28513 0 0 cmyk
@
330.97 601.77 mo
334.49 591.21 li
338.01 601.77 li
330.97 601.77 li
cp
ef
326.49 622.66 mo
342.49 622.66 li
342.49 612.01 li
326.49 612.01 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.711696 .386694 .0746776 .00158694 cmyk
/LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H findfont [8.25 0 0 -8.25 0 0 ]msf
326.9 620.57 mo
(\033\240\031\236)
[8.27505 0 ]xsh
255.12 466.3 mo
255.12 500.13 li
.62768 .28513 0 0 cmyk
@
258.64 499.25 mo
255.12 506.29 li
251.6 499.25 li
258.64 499.25 li
cp
ef
255.12 341.27 mo
255.12 375.1 li
@
258.64 374.22 mo
255.12 381.26 li
251.6 374.22 li
258.64 374.22 li
cp
ef
255.12 216.24 mo
255.12 250.07 li
@
258.64 249.19 mo
255.12 256.23 li
251.6 249.19 li
258.64 249.19 li
cp
ef
361.42 548.81 mo
372.05 548.81 li
372.05 159.55 li
346.32 159.55 li
@
347.2 163.07 mo
340.16 159.55 li
347.2 156.03 li
347.2 163.07 li
cp
ef
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/LCCJYC+Calibri*1 uf
/LCCJYC+Calibri uf
/NQPBAA+Calibri uf
/LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H-Identity-H uf
/LCCJYB+#e5#ae#8b#e4#bd#93-GBK-EUC-H /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
